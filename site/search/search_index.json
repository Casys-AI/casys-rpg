{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Complex Adaptive Systems of AI <p>A neurosymbolic framework orchestrating LLMs and rule-based agents through formalized graph-based cognitive workflows.</p> Get Started View on GitHub A New Approach to Cognitive Workflows <p>                 Imagine a cognitive platform that orchestrates various agents                  (rules, LLMs, etc.) based on workflows formalized as graphs for each                  decision process. This platform revolutionizes how we think about interactive systems.             </p> Structure and Orchestration analytics Logical Structure <ul> <li>Definition of graphs representing critical steps</li> <li>Nodes embodying logic and processing</li> <li>Automatic generation from structured knowledge</li> <li>Support for both narrative and technical nodes</li> <li>Integration with existing documentation (Obsidian)</li> </ul> settings Agent Orchestration <ul> <li>Contextual invocation of appropriate agents</li> <li>Shared state for decision coherence</li> <li>Blend of symbolic and neural approaches</li> <li>Real-time agent coordination</li> <li>Extensible agent architecture</li> </ul> Core Features \ud83d\udd04 Graphical Workflows <p>Define or auto-generate decision graphs with nodes representing critical process steps and transition conditions. Each node can contain:</p> <ul> <li>Business rules and conditions</li> <li>LLM interaction points</li> <li>User input handlers</li> <li>State transitions</li> </ul> \ud83e\udd16 Agent System <p>A sophisticated multi-agent system featuring:</p> <ul> <li>StoryGraph: Workflow and state transition management</li> <li>RulesAgent: Game rules analysis and interpretation</li> <li>DecisionAgent: Decision logic management</li> <li>NarratorAgent: Content presentation and formatting</li> <li>TraceAgent: Action history and character stats</li> </ul> \ud83d\udcbe State Management <p>Immutable state system with:</p> <ul> <li>Pydantic v2 validation</li> <li>Complete action traceability</li> <li>Decision tracking</li> <li>Asynchronous event handling</li> <li>In-memory caching</li> </ul> Multiple Applications auto_stories Interactive Storytelling <p>Create immersive narratives where:</p> <ul> <li>Nodes describe key moments</li> <li>LLM narrator writes immersive descriptions</li> <li>Decision agent guides progression</li> <li>Player choices influence the story</li> </ul> build Industrial Diagnostics <p>Model verification protocols with:</p> <ul> <li>Rule-based verification nodes</li> <li>LLM interpretation of complex logs</li> <li>Automated decision routing</li> <li>Compliance tracking</li> </ul> account_tree Branching Processes <p>Handle any branching workflow:</p> <ul> <li>Training programs</li> <li>Security audits</li> <li>Intelligent checklists</li> <li>Process automation</li> </ul> Technical Architecture \ud83d\udd27 Core Technologies <ul> <li>FastAPI: REST API and WebSocket support</li> <li>Pydantic v2: Data validation and serialization</li> <li>LangGraph: Agent orchestration</li> <li>OpenAI API (gpt-4o-mini): Language model</li> <li>AsyncIO: Asynchronous processing</li> </ul> \ud83d\udce6 Configuration Hierarchy <ul> <li>GameConfig: Main game configuration</li> <li>AgentConfigs: Agent-specific settings</li> <li>ManagerConfigs: Manager configurations</li> <li>StorageConfig: Storage settings</li> </ul> \ud83c\udfae Manager System <ul> <li>AgentManager: High-level coordinator</li> <li>StateManager: Game state management</li> <li>CacheManager: Memory cache handling</li> <li>RulesManager: Game rules management</li> <li>CharacterManager: Character handling</li> </ul> psychology Generative &amp; Accessibility Features <p>Beyond manual workflow execution, Complex Adaptive Systems enables automatic graph generation from your existing documents</p> memory <p>Neurosymbolic assistant (LLM + rules)</p> history <p>Intuitive conversational interface</p> replay <p>Import from Obsidian notes</p> auto_awesome <p>Automatic workflow generation</p> visibility <p>Visual graph representation</p> Memory, History &amp; Traceability history Comprehensive Logging <p>Every agent action is recorded with:</p> <ul> <li>Request details</li> <li>Response content</li> <li>Decision justification</li> <li>State changes</li> </ul> replay Replay &amp; Rollback <p>Advanced history features:</p> <ul> <li>Decision history review</li> <li>Workflow path replay</li> <li>State rollback capability</li> <li>Timeline visualization</li> </ul> description Audit &amp; Compliance <p>Complete decision journey tracking:</p> <ul> <li>Detailed audit trails</li> <li>Compliance documentation</li> <li>Decision justifications</li> <li>Process verification</li> </ul> Cognitive Workflow Architecture <p>A comprehensive framework combining:</p> graph Graph Engine <p>Sophisticated graph processing with node management and transition logic</p> group Agent System <p>Coordinated multi-agent system with specialized cognitive capabilities</p> memory State Management <p>Robust state handling with immutability and validation</p> auto_awesome Auto Generation <p>Intelligent workflow creation from structured documentation</p> accessibility Accessibility <p>No-code interface for non-developers</p> extension Extensibility <p>Flexible architecture for custom agents and workflows</p> Ready to Get Started? <p>Build your first cognitive workflow in minutes</p> Quick Start Guide View on GitHub"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior:</p> <ul> <li>The use of sexualized language or imagery</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Project maintainers are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the project team. All complaints will be reviewed and investigated promptly and fairly.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to Casys RPG will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Architecture documentation</li> <li>Migration guides</li> <li>Validation rules documentation</li> <li>Test coverage for edge cases</li> <li>Initial project setup</li> <li>Basic game engine structure</li> <li>Four specialized LLM agents:</li> <li>Rules Agent</li> <li>Decision Agent</li> <li>Narrator Agent</li> <li>Trace Agent</li> <li>WebSocket-based real-time updates</li> <li>Redis state management</li> <li>Basic web interface</li> <li>Documentation compl\u00e8te de l'architecture frontend</li> <li>Nouvelles bonnes pratiques pour Svelte  </li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>CharacterManager</li> <li>Made save_character async to properly handle cache operations</li> <li>Added character_id parameter with \"current\" as default</li> <li>Made save_character_stats and update_character_stats async</li> <li>Improved error handling and logging</li> <li> <p>Better character state management</p> </li> <li> <p>StateManager</p> </li> <li>Added CharacterManager as a dependency</li> <li>Improved character creation and management</li> <li>Better separation of concerns with CharacterManager</li> <li>Updated tests to use proper mocks</li> <li> <p>Character state now managed by CharacterManager</p> </li> <li> <p>WorkflowManager</p> </li> <li>Extracted section transition logic to _handle_section_transition</li> <li>Simplified start_workflow by delegating to StateManager</li> <li>Better workflow state tracking and logging</li> <li>Improved error handling</li> <li> <p>Added workflow metadata management</p> </li> <li> <p>StoryGraph</p> </li> <li>Refactored to use dictionary-based dependency injection</li> <li>Managers and agents now passed as collections</li> <li>Improved configuration handling</li> <li> <p>Better separation of concerns</p> </li> <li> <p>Models</p> </li> <li>Moved Choice model and validation to RulesModel</li> <li>Simplified DecisionModel by removing choice handling</li> <li>Added comprehensive validation for all choice types</li> <li>Updated model relationships for better clarity</li> <li>Simplified DecisionModel state management</li> <li>Removed immutability constraints from individual models</li> <li>Fixed Pydantic configuration to use model_config</li> <li>Improved validation for conditions in DecisionModel</li> <li> <p>Better alignment with GameState architecture</p> </li> <li> <p>Dependency Injection</p> </li> <li>Standardized configuration-based injection</li> <li>Removed direct manager arguments from constructors</li> <li> <p>Improved testability and flexibility</p> </li> <li> <p>GameState</p> </li> <li>Added <code>keep_if_not_empty</code> reducer function for LangGraph fan-in<ul> <li>Returns <code>b</code> only if not empty, otherwise keeps <code>a</code></li> <li>Used to preserve important state values during merging</li> </ul> </li> <li>Modified field annotations in GameStateBase:<ul> <li>Changed <code>session_id</code> and <code>game_id</code> from <code>first_not_none</code> to <code>keep_if_not_empty</code></li> <li>Ensures IDs are only overwritten with non-empty values</li> </ul> </li> <li>Modified field annotations in GameStateInput:<ul> <li>Changed <code>section_number</code> and <code>player_input</code> to use <code>keep_if_not_empty</code></li> <li>Better preservation of input state during merging</li> </ul> </li> <li>Updated GameStateOutput model fields:<ul> <li>Changed <code>decision</code>, <code>trace</code>, and <code>character</code> to use <code>first_not_none</code> annotation</li> <li>All content models now consistently use <code>first_not_none</code> for merging</li> </ul> </li> <li> <p>Simplified GameState.with_updates logging:</p> <ul> <li>Removed verbose narrative content logging</li> <li>Added focused debug logging for session_id and section_number</li> </ul> </li> <li> <p>Optimized state management in GameState</p> </li> <li>Simplified model merging strategy using take_last_value for DecisionModel</li> <li> <p>Improved node data handling with take_from_node for NarratorModel and RulesModel</p> </li> <li> <p>Refactoring des services pour utiliser des objets simples au lieu de classes</p> </li> <li>Optimisation de la gestion d'\u00e9tat avec useResource$ et useTask$</li> <li>Am\u00e9lioration de la gestion WebSocket</li> <li>Simplification de la configuration API</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>GameConfig</li> <li>Fixed import paths and module organization</li> <li>Improved configuration validation</li> <li> <p>Better error messages for invalid configs</p> </li> <li> <p>Factory Methods</p> </li> <li>Removed redundant model factory methods</li> <li>Using direct constructors for simple models</li> <li> <p>Factory methods reserved for complex objects</p> </li> <li> <p>Probl\u00e8mes de s\u00e9rialisation Qwik</p> </li> <li>Gestion des erreurs WebSocket</li> <li>Navigation entre les sections</li> <li>Removed incompatible model_post_init usage</li> <li>Corrected Pydantic configuration format</li> <li>Fixed model validation workflow</li> <li>Character save operations now properly async</li> <li>Section transition handling in workflow</li> <li>Character state persistence</li> <li>Workflow state transitions</li> <li>Error handling in character operations</li> <li>Fixed state merging issues in parallel node execution</li> <li>Corrected player_input handling in decision processing</li> <li>Fixed None value handling in take_from_node function</li> </ul>"},{"location":"changelog/#architecture","title":"Architecture","text":"<ul> <li>Improved dependency injection patterns</li> <li>Better separation of concerns in models</li> <li>More consistent configuration handling</li> <li>Cleaner model relationships</li> <li>Better alignment with GameState immutability pattern</li> <li>Clearer separation of responsibilities:</li> <li>GameState handles immutability</li> <li>Models focus on validation</li> <li>Improved model update workflow</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>Updated architecture documentation</li> <li>Added migration guides</li> <li>Improved code comments</li> <li>Added validation rules documentation</li> </ul>"},{"location":"changelog/#testing","title":"Testing","text":"<ul> <li>Added comprehensive Choice validation tests</li> <li>Updated fixtures for new model structure</li> <li>Improved test organization</li> <li>Better test coverage for edge cases</li> <li>Updated model tests to reflect mutable state</li> <li>Added tests for model updates and validation</li> <li>Improved test coverage for edge cases</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Pattern Singleton des services</li> <li>useVisibleTask$ remplac\u00e9 par useTask$</li> <li>Classes GameService et WebSocketService</li> <li>Code legacy non utilis\u00e9</li> </ul>"},{"location":"changelog/#technical-debt","title":"Technical Debt","text":"<ul> <li>Consider adding character versioning</li> <li>Add more comprehensive error states</li> <li>Improve cache invalidation strategy</li> <li>Add performance metrics</li> <li>Consider implementing character templates</li> </ul>"},{"location":"changelog/#010-2024-12-31","title":"[0.1.0] - 2024-12-31","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Initial release with core functionality:</li> <li>Multi-agent system architecture</li> <li>Core models and validation</li> <li>Basic game engine</li> <li>Test suite foundation</li> <li>Configuration system</li> <li>Model factories</li> <li>Manager protocols</li> </ul>"},{"location":"contributing/","title":"Contributing to Casys RPG","text":"<p>Thank you for your interest in contributing to Casys RPG! This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Code of Conduct</li> <li>Getting Started</li> <li>Development Setup</li> <li>Making Changes</li> <li>Testing</li> <li>Documentation</li> <li>Submitting Changes</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project follows a Code of Conduct that all contributors are expected to adhere to. Please read Code of Conduct before contributing.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork:    <pre><code>git clone https://github.com/YOUR-USERNAME/casys-rpg.git\n</code></pre></li> <li>Add the upstream repository:    <pre><code>git remote add upstream https://github.com/Casys-AI/casys-rpg.git\n</code></pre></li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Create a virtual environment:    <pre><code>python -m venv .venv\n</code></pre></p> </li> <li> <p>Activate the environment:    <pre><code># Windows\n.venv\\Scripts\\activate\n\n# Linux/MacOS\nsource .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Install development dependencies:    <pre><code>pip install -r requirements-dev.txt\n</code></pre></p> </li> </ol>"},{"location":"contributing/#making-changes","title":"Making Changes","text":""},{"location":"contributing/#branch-naming-convention","title":"Branch Naming Convention","text":"<ul> <li>Feature: <code>feature/description</code></li> <li>Bug fix: <code>fix/description</code></li> <li>Documentation: <code>docs/description</code></li> <li>Performance: <code>perf/description</code></li> </ul>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":"<p>We follow these principles: - SOLID Design Principles - DRY (Don't Repeat Yourself) - KISS (Keep It Simple, Stupid) - YAGNI (You Aren't Gonna Need It)</p>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8</li> <li>Use type hints</li> <li>Document all public functions and classes</li> <li>Keep functions focused and small</li> <li>Use meaningful variable names</li> </ul> <p>Example: <pre><code>from typing import Optional\n\ndef process_section(\n    section_number: int,\n    content: Optional[str] = None\n) -&gt; bool:\n    \"\"\"Process a game section.\n\n    Args:\n        section_number: Section identifier\n        content: Optional section content\n\n    Returns:\n        bool: True if processing successful\n    \"\"\"\n    # Implementation\n</code></pre></p>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/test_rules_agent.py\n\n# Run with coverage\npytest --cov=casys_rpg tests/\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<ol> <li>Place tests in the <code>tests/</code> directory</li> <li>Follow the naming convention: <code>test_*.py</code></li> <li>Use descriptive test names</li> <li>Include both positive and negative tests</li> <li>Mock external dependencies</li> </ol> <p>Example: <pre><code>def test_process_section_valid_input():\n    # Arrange\n    section_number = 1\n    content = \"Test content\"\n\n    # Act\n    result = process_section(section_number, content)\n\n    # Assert\n    assert result is True\n</code></pre></p>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#code-documentation","title":"Code Documentation","text":"<ul> <li>Use docstrings for all public APIs</li> <li>Follow Google style docstrings</li> <li>Include type hints</li> <li>Document exceptions</li> </ul>"},{"location":"contributing/#project-documentation","title":"Project Documentation","text":"<ul> <li>Update relevant .md files</li> <li>Keep the API documentation current</li> <li>Add examples for new features</li> <li>Update the changelog</li> </ul>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":"<ol> <li> <p>Create a new branch:    <pre><code>git checkout -b feature/my-feature\n</code></pre></p> </li> <li> <p>Make your changes:    <pre><code>git add .\ngit commit -m \"feat: add new feature\"\n</code></pre></p> </li> <li> <p>Push to your fork:    <pre><code>git push origin feature/my-feature\n</code></pre></p> </li> <li> <p>Create a Pull Request</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Use the PR template</li> <li>Reference any related issues</li> <li>Include tests</li> <li>Update documentation</li> <li>Follow commit message convention</li> </ul>"},{"location":"contributing/#commit-message-format","title":"Commit Message Format","text":"<pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: - feat: New feature - fix: Bug fix - docs: Documentation - style: Formatting - refactor: Code restructuring - test: Adding tests - chore: Maintenance</p> <p>Example: <pre><code>feat(rules): add dice roll validation\n\n- Add input validation for dice rolls\n- Implement result calculation\n- Add unit tests\n\nCloses #123\n</code></pre></p>"},{"location":"contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass</li> <li>Code review by maintainers</li> <li>Documentation review</li> <li>Testing verification</li> <li>Final approval</li> </ol>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Create an issue</li> <li>Join our Discord server</li> <li>Check the documentation</li> <li>Contact maintainers</li> </ul> <p>Thank you for contributing to Casys RPG!</p>"},{"location":"license/","title":"Attribution-NoDerivatives 4.0 International","text":"<p>Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.</p>"},{"location":"license/#using-creative-commons-public-licenses","title":"Using Creative Commons Public Licenses","text":"<p>Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.</p> <ul> <li> <p>Considerations for licensors: Our public licenses are intended for use by those authorized to give the public     permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are     irrevocable. Licensors should read and understand the terms and conditions of the license they choose before     applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can     reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes     other CC-licensed material, or material used under an exception or limitation to     copyright. More considerations for licensors.</p> </li> <li> <p>Considerations for the public: By using one of our public licenses, a licensor grants the public permission to     use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for     any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not     regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a     licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including     because others have copyright or other rights in the material. A licensor may make special requests, such as asking     that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those     requests where     reasonable. More considerations for the public.</p> </li> </ul>"},{"location":"license/#creative-commons-attribution-noderivatives-40-international-public-license","title":"Creative Commons Attribution-NoDerivatives 4.0 International Public License","text":"<p>By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NoDerivatives 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.</p>"},{"location":"license/#section-1-definitions","title":"Section 1 \u2013 Definitions.","text":"<p>a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.</p> <p>b. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.</p> <p>c. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.</p> <p>d. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.</p> <p>e. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.</p> <p>f. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.</p> <p>g. Licensor means the individual(s) or entity(ies) granting rights under this Public License.</p> <p>h. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.</p> <p>i. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.</p> <p>j. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.</p>"},{"location":"license/#section-2-scope","title":"Section 2 \u2013 Scope.","text":"<p>a. License grant.</p> <ol> <li>Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free,    non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:</li> </ol> <p>A. reproduce and Share the Licensed Material, in whole or in part; and</p> <p>B. produce and reproduce, but not Share, Adapted Material.</p> <ol> <li> <p>Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this    Public License does not apply, and You do not need to comply with its terms and conditions.</p> </li> <li> <p>Term. The term of this Public License is specified in Section 6(a).</p> </li> <li> <p>Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights    in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do    so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical    modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent    Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this    Section 2(a)(4) never produces Adapted Material.</p> </li> <li> <p>Downstream recipients.</p> </li> </ol> <p>A. Offer from the Licensor \u2013 Licensed Material. Every recipient of the Licensed Material automatically receives    an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.</p> <p>B. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or    apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed    Rights by any recipient of the Licensed Material.</p> <ol> <li>No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply    that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted    official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).</li> </ol> <p>b. Other rights.</p> <ol> <li> <p>Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy,    and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to    assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed    Rights, but not otherwise.</p> </li> <li> <p>Patent and trademark rights are not licensed under this Public License.</p> </li> <li> <p>To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed    Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory    licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.</p> </li> </ol>"},{"location":"license/#section-3-license-conditions","title":"Section 3 \u2013 License Conditions.","text":"<p>Your exercise of the Licensed Rights is expressly made subject to the following conditions.</p> <p>a. Attribution.</p> <ol> <li>If You Share the Licensed Material, You must:</li> </ol> <p>A. retain the following if it is supplied by the Licensor with the Licensed Material:</p> <p>i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any    reasonable manner requested by the Licensor (including by pseudonym if designated);</p> <p>ii. a copyright notice;</p> <p>iii. a notice that refers to this Public License;</p> <p>iv. a notice that refers to the disclaimer of warranties;</p> <p>v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable;</p> <p>B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and</p> <p>C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or    hyperlink to, this Public License.</p> <p>For the avoidance of doubt, You do not have permission under this Public License to Share Adapted Material.</p> <ol> <li> <p>You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in    which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI    or hyperlink to a resource that includes the required information.</p> </li> <li> <p>If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent    reasonably practicable.</p> </li> </ol>"},{"location":"license/#section-4-sui-generis-database-rights","title":"Section 4 \u2013 Sui Generis Database Rights.","text":"<p>Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:</p> <p>a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database, provided You do not Share Adapted Material;</p> <p>b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and</p> <p>c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.</p> <p>For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.</p>"},{"location":"license/#section-5-disclaimer-of-warranties-and-limitation-of-liability","title":"Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability.","text":"<p>a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.</p> <p>b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.</p> <p>c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.</p>"},{"location":"license/#section-6-term-and-termination","title":"Section 6 \u2013 Term and Termination.","text":"<p>a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.</p> <p>b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:</p> <ol> <li> <p>automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the    violation; or</p> </li> <li> <p>upon express reinstatement by the Licensor.</p> </li> </ol> <p>For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.</p> <p>c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.</p> <p>d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.</p>"},{"location":"license/#section-7-other-terms-and-conditions","title":"Section 7 \u2013 Other Terms and Conditions.","text":"<p>a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.</p> <p>b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.</p>"},{"location":"license/#section-8-interpretation","title":"Section 8 \u2013 Interpretation.","text":"<p>a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.</p> <p>b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.</p> <p>c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.</p> <p>d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.</p> <p>Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.</p> <p>Creative Commons may be contacted at creativecommons.org</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/posts/introducing-casys-rpg/","title":"Introducing CASYS RPG: Next-Gen Interactive Storytelling","text":"<p>We're excited to announce CASYS RPG, a revolutionary interactive game book engine powered by advanced AI agents. This project represents a significant step forward in merging traditional game book mechanics with modern AI capabilities.</p>"},{"location":"blog/posts/introducing-casys-rpg/#why-casys-rpg","title":"Why CASYS RPG?","text":"<p>Interactive game books have been around for decades, but they've always been limited by their static nature. CASYS RPG changes this by introducing dynamic storytelling powered by five specialized AI agents:</p> <ul> <li>StoryGraph: Manages game flow and state transitions</li> <li>RulesAgent: Interprets and applies game rules</li> <li>DecisionAgent: Handles complex decision-making</li> <li>NarratorAgent: Crafts engaging narrative responses</li> <li>TraceAgent: Tracks character progress and game statistics</li> </ul>"},{"location":"blog/posts/introducing-casys-rpg/#technical-innovation","title":"Technical Innovation","text":"<p>Our architecture leverages cutting-edge technologies:</p> <ul> <li>LangChain and LangGraph for agent orchestration</li> <li>FastAPI for high-performance API endpoints</li> <li>Pydantic v2 for robust state management</li> <li>Modern frontend with SvelteKit and TailwindCSS</li> </ul>"},{"location":"blog/posts/introducing-casys-rpg/#whats-next","title":"What's Next?","text":"<p>We're actively working on:</p> <ol> <li>Enhanced rule interpretation capabilities</li> <li>Improved narrative generation</li> <li>Advanced character progression systems</li> <li>Extended documentation and tutorials</li> </ol> <p>Stay tuned for more updates as we continue to develop and enhance CASYS RPG!</p>"},{"location":"blog/posts/introducing-casys-rpg/#get-started","title":"Get Started","text":"<p>Check out our quick start guide to begin your journey with CASYS RPG.</p>"},{"location":"content/architecture/","title":"System Architecture","text":"<p>Overview</p> <p>CASYS RPG follows a clean, layered architecture with clear separation of concerns and SOLID principles.</p>"},{"location":"content/architecture/#architecture-overview","title":"Architecture Overview","text":"<p>Key Components</p> <p>The system is divided into three main layers: 1. Presentation Layer (Frontend &amp; API) 2. Domain Layer (Cognitive System &amp; Business Logic) 3. Infrastructure Layer (Storage &amp; External Services)</p> <pre><code>graph TD\n    subgraph Presentation Layer\n        FE[Frontend SvelteKit]\n        API[FastAPI Endpoints]\n    end\n\n    subgraph Domain Layer\n        COG[Cognitive System]\n        MOD[Domain Models]\n        SER[Domain Services]\n    end\n\n    subgraph Infrastructure Layer\n        DB[Storage]\n        EXT[External Services]\n        LOG[Logging]\n    end\n\n    FE --&gt; API\n    API --&gt; COG\n    COG --&gt; MOD\n    COG --&gt; SER\n    SER --&gt; DB\n    SER --&gt; EXT</code></pre>"},{"location":"content/architecture/#software-components","title":"Software Components","text":""},{"location":"content/architecture/#manager-system","title":"Manager System","text":"<pre><code>graph TD\n    subgraph Core Managers\n        AM[AgentManager] --&gt; SM[StateManager]\n        AM --&gt; WM[WorkflowManager]\n        AM --&gt; CM[CacheManager]\n    end\n\n    subgraph Domain Managers\n        RM[RulesManager]\n        DM[DecisionManager]\n        NM[NarratorManager]\n        TM[TraceManager]\n        CHM[CharacterManager]\n    end\n\n    subgraph Infrastructure\n        FA[FilesystemAdapter]\n    end\n\n    AM --&gt; RM\n    AM --&gt; DM\n    AM --&gt; NM\n    AM --&gt; TM\n    AM --&gt; CHM\n\n    SM --&gt; FA\n    CM --&gt; FA</code></pre> Core ManagersDomain ManagersDependencies <ul> <li> <p>Agent Manager</p> <ul> <li>Agent orchestration</li> <li>Dependency injection</li> <li>Event coordination</li> <li>Error handling</li> </ul> </li> <li> <p>State Manager</p> <ul> <li>State lifecycle</li> <li>Persistence</li> <li>Version control</li> <li>Event tracking</li> </ul> </li> <li> <p>Cache Manager</p> <ul> <li>Memory management</li> <li>Cache invalidation</li> <li>Performance optimization</li> </ul> </li> <li> <p>Workflow Manager</p> <ul> <li>Flow control</li> <li>Transition management</li> <li>Process coordination</li> </ul> </li> </ul> <ul> <li> <p>Rules Manager</p> <ul> <li>Rule processing</li> <li>Validation logic</li> <li>Game mechanics</li> </ul> </li> <li> <p>Decision Manager</p> <ul> <li>Choice handling</li> <li>Outcome processing</li> <li>State transitions</li> </ul> </li> <li> <p>Narrator Manager</p> <ul> <li>Content generation</li> <li>Response formatting</li> <li>Style control</li> </ul> </li> <li> <p>Character Manager</p> <ul> <li>Character state</li> <li>Attribute management</li> <li>Inventory control</li> </ul> </li> <li> <p>Trace Manager</p> <ul> <li>Event logging</li> <li>Analytics</li> <li>Debugging</li> </ul> </li> </ul> <ul> <li> <p>Dependency Injection</p> <ul> <li>Protocol-based interfaces</li> <li>Service registration</li> <li>Lifecycle management</li> </ul> </li> <li> <p>Service Resolution</p> <ul> <li>Lazy loading</li> <li>Scoped services</li> <li>Singleton services</li> </ul> </li> </ul>"},{"location":"content/architecture/#domain-models","title":"Domain Models","text":"<pre><code>graph TD\n    subgraph Models\n        GS[GameState] --&gt; CH[Character]\n        GS --&gt; RU[Rules]\n        GS --&gt; TR[Trace]\n        GS --&gt; NA[Narrator]\n        GS --&gt; DE[Decision]\n    end\n\n    subgraph Types\n        AT[AgentTypes]\n        CT[CommonTypes]\n        MT[ManagerTypes]\n    end\n\n    subgraph Factories\n        GF[GameFactory] --&gt; MF[ModelFactory]\n        MF --&gt; GS\n    end\n\n    GS --&gt; AT\n    GS --&gt; CT\n    GS --&gt; MT</code></pre> Game StateData ModelsTypes System <ul> <li> <p>Core State Management</p> <ul> <li>Immutable state design</li> <li>Version control</li> <li>State transitions</li> <li>Event tracking</li> </ul> </li> <li> <p>Key Components</p> <ul> <li>Character state</li> <li>Game rules</li> <li>Current section</li> <li>History log</li> <li>Metadata</li> </ul> </li> </ul> <ul> <li> <p>Character Model</p> <ul> <li>Attributes</li> <li>Inventory</li> <li>Skills</li> <li>Status</li> </ul> </li> <li> <p>Rules Model</p> <ul> <li>Game mechanics</li> <li>Constraints</li> <li>Validation rules</li> <li>Action rules</li> </ul> </li> <li> <p>Decision Model</p> <ul> <li>Choice processing</li> <li>Outcomes</li> <li>Conditions</li> <li>Analysis results</li> </ul> </li> </ul> <ul> <li> <p>Agent Types</p> <ul> <li>Agent protocols</li> <li>Agent configurations</li> <li>Agent states</li> </ul> </li> <li> <p>Manager Types</p> <ul> <li>Manager protocols</li> <li>Configuration types</li> <li>Service types</li> </ul> </li> <li> <p>Common Types</p> <ul> <li>Shared enums</li> <li>Base types</li> <li>Utility types</li> </ul> </li> </ul>"},{"location":"content/architecture/#factory-system","title":"Factory System","text":"<pre><code>sequenceDiagram\n    participant GF as GameFactory\n    participant MF as ModelFactory\n    participant GS as GameState\n    participant AG as Agents\n\n    GF-&gt;&gt;MF: Create Models\n    MF-&gt;&gt;GS: Initialize State\n    GF-&gt;&gt;AG: Initialize Agents\n    AG-&gt;&gt;GS: Subscribe to State</code></pre> Game FactoryModel Factory <ul> <li> <p>Initialization</p> <ul> <li>Game configuration</li> <li>State setup</li> <li>Agent creation</li> <li>Manager setup</li> </ul> </li> <li> <p>Dependencies</p> <ul> <li>Model injection</li> <li>Service binding</li> <li>Configuration loading</li> </ul> </li> <li> <p>Lifecycle</p> <ul> <li>Startup sequence</li> <li>Shutdown handling</li> <li>State persistence</li> </ul> </li> </ul> <ul> <li> <p>Model Creation</p> <ul> <li>State initialization</li> <li>Model validation</li> <li>Default values</li> <li>Type checking</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Factory patterns</li> <li>Dependency injection</li> <li>Configuration binding</li> </ul> </li> </ul>"},{"location":"content/architecture/#api-architecture","title":"API Architecture","text":"<pre><code>graph TD\n    subgraph API Layer\n        RT[Routes] --&gt; DTO[DTOs]\n        RT --&gt; MD[Middleware]\n        RT --&gt; UT[Utils]\n    end\n\n    subgraph Routes\n        GR[Game Routes]\n        AR[Admin Routes]\n        DR[Debug Routes]\n    end\n\n    subgraph DTOs\n        RQ[Request DTOs]\n        RS[Response DTOs]\n    end\n\n    RT --&gt; AM[Agent Manager]\n    RT --&gt; SM[State Manager]</code></pre> API StructureIntegration <ul> <li> <p>Routes</p> <ul> <li>Game endpoints</li> <li>Admin endpoints</li> <li>Debug endpoints</li> <li>WebSocket handlers</li> </ul> </li> <li> <p>DTOs</p> <ul> <li>Request models</li> <li>Response models</li> <li>Validation</li> <li>Serialization</li> </ul> </li> <li> <p>Middleware</p> <ul> <li>Authentication</li> <li>Error handling</li> <li>Logging</li> <li>Rate limiting</li> </ul> </li> </ul> <ul> <li> <p>Manager Integration</p> <ul> <li>State management</li> <li>Agent coordination</li> <li>Cache control</li> </ul> </li> <li> <p>WebSocket</p> <ul> <li>Real-time updates</li> <li>Event streaming</li> <li>State synchronization</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Global error handling</li> <li>Response formatting</li> <li>Status codes</li> </ul> </li> </ul>"},{"location":"content/architecture/#cognitive-system-architecture","title":"Cognitive System Architecture","text":"<p>Overview</p> <p>CASYS RPG uses a sophisticated multi-agent architecture that combines AI processing,  state management, and dynamic storytelling to create an immersive and adaptive gaming experience.</p>"},{"location":"content/architecture/#system-components","title":"System Components","text":"Core ArchitectureAgentsState System <ul> <li> <p>Agent System</p> <ul> <li>Multi-agent orchestration</li> <li>Event processing</li> <li>State transitions</li> </ul> </li> <li> <p>State Management</p> <ul> <li>State validation</li> <li>State transformation</li> <li>History tracking</li> </ul> </li> <li> <p>Decision System</p> <ul> <li>Choice evaluation</li> <li>Path selection</li> <li>Outcome determination</li> </ul> </li> <li> <p>Memory Management</p> <ul> <li>Short-term memory</li> <li>Long-term storage</li> <li>Cache system</li> </ul> </li> </ul> <ul> <li> <p>Story Graph Agent</p> <ul> <li>Narrative flow control</li> <li>Scene transitions</li> <li>Story progression</li> </ul> </li> <li> <p>Rules Agent</p> <ul> <li>Rule validation</li> <li>Constraint checking</li> <li>Game mechanics</li> </ul> </li> <li> <p>Decision Agent</p> <ul> <li>Choice processing</li> <li>Action validation</li> <li>Outcome determination</li> </ul> </li> <li> <p>Narrator Agent</p> <ul> <li>Content generation</li> <li>Text formatting</li> <li>Response styling</li> </ul> </li> <li> <p>Trace Agent</p> <ul> <li>History tracking</li> <li>State logging</li> <li>Analytics collection</li> </ul> </li> </ul> <ul> <li> <p>Game State</p> <ul> <li>Current scene</li> <li>Player status</li> <li>Game variables</li> </ul> </li> <li> <p>Memory System</p> <ul> <li>Short-term cache</li> <li>Long-term storage</li> <li>State history</li> </ul> </li> </ul>"},{"location":"content/architecture/#design-principles","title":"Design Principles","text":"Clean ArchitectureSOLID PrinciplesBest Practices <p>Layers</p> <ol> <li>Presentation: UI &amp; API endpoints</li> <li>Domain: Business logic &amp; models</li> <li>Infrastructure: Storage &amp; services</li> </ol> <p>Implementation</p> <ul> <li>Single Responsibility: Each component has one job</li> <li>Open/Closed: Extend, don't modify</li> <li>Liskov Substitution: Proper inheritance</li> <li>Interface Segregation: Specific interfaces</li> <li>Dependency Inversion: Depend on abstractions</li> </ul> <p>Guidelines</p> <ul> <li>Protocol-based design</li> <li>Immutable state</li> <li>Type safety</li> <li>Error boundaries</li> <li>Async processing</li> <li>Resource management</li> </ul>"},{"location":"content/architecture/#core-principles","title":"Core Principles","text":"Clean ArchitectureSOLID PrinciplesDesign Patterns <p>Guidelines</p> <ul> <li>Clear dependency direction</li> <li>Domain-driven design</li> <li>Separation of concerns</li> </ul> <p>Implementation</p> <ul> <li>Single Responsibility: Each component has one job</li> <li>Open/Closed: Extend, don't modify</li> <li>Liskov Substitution: Proper inheritance</li> <li>Interface Segregation: Focused interfaces</li> <li>Dependency Inversion: Depend on abstractions</li> </ul> <p>Patterns Used</p> <ul> <li>CQRS for state management</li> <li>Repository pattern for data access</li> <li>Factory pattern for object creation</li> <li>Observer pattern for events</li> </ul>"},{"location":"content/architecture/#implementation-details","title":"Implementation Details","text":"<p>Code Structure</p> <pre><code># Domain Layer\nclass GameDomain:\n    def __init__(self, repository: Repository):\n        self.repository = repository\n        self.cognitive_system = CognitiveSystem()\n\n    async def process_action(self, action: Action) -&gt; Result:\n        # Implementation\n        pass\n</code></pre>"},{"location":"content/architecture/#layer-responsibilities","title":"Layer Responsibilities","text":"Presentation LayerDomain LayerInfrastructure Layer <ul> <li>Handle user interactions</li> <li>Format responses</li> <li>Basic validation</li> <li>Route requests</li> </ul> <ul> <li>Business logic</li> <li>State management</li> <li>Validation rules</li> <li>Domain events</li> </ul> <ul> <li>Data persistence</li> <li>External services</li> <li>Logging</li> <li>Caching</li> </ul>"},{"location":"content/architecture/#best-practices","title":"Best Practices","text":"<p>Architecture Guidelines</p> <ol> <li>Keep layers loosely coupled</li> <li>Use dependency injection</li> <li>Follow domain-driven design</li> <li>Implement proper error handling</li> </ol> <p>Common Pitfalls</p> <ul> <li>Mixing concerns between layers</li> <li>Tight coupling to infrastructure</li> <li>Inconsistent error handling</li> <li>Direct database access from presentation</li> </ul>"},{"location":"content/architecture/#related-topics","title":"Related Topics","text":"<ul> <li>Cognitive System</li> <li>Frontend Architecture</li> <li>API Documentation</li> </ul>"},{"location":"content/architecture/#status-and-roadmap","title":"Status and Roadmap","text":"<p>Current Status</p> <p>Version: 0.1.0 - Core architecture implemented - Basic patterns in place - Testing framework ready</p> <p>Roadmap</p> <ol> <li>Enhanced error handling</li> <li>Metrics collection</li> <li>Performance optimization</li> <li>Scalability improvements</li> </ol> <p>Questions?</p> <p>Need help understanding the architecture? Check our  GitHub Discussions  or raise an issue.</p>"},{"location":"content/architecture/agents/","title":"Agent System Architecture","text":"<p>Overview</p> <p>CASYS RPG implements a sophisticated multi-agent architecture that combines LLM-based processing with symbolic reasoning. The system uses a neurosymbolic approach where each agent specializes in specific cognitive functions while working together through a central Story Graph.</p>"},{"location":"content/architecture/agents/#system-architecture","title":"System Architecture","text":"<pre><code>graph TD\n    subgraph Core System\n        SG[Story Graph] --&gt; |Orchestrates| AS[Agent System]\n        SG --&gt; |Manages| SM[State Management]\n    end\n\n    subgraph Agent System\n        AS --&gt; RA[Rules Agent]\n        AS --&gt; DA[Decision Agent]\n        AS --&gt; NA[Narrator Agent]\n        AS --&gt; TA[Trace Agent]\n    end\n\n    subgraph State Management\n        SM --&gt; CM[Cache Manager]\n        SM --&gt; WM[Workflow Manager]\n    end\n\n    RA --&gt; |Validates| SM\n    DA --&gt; |Updates| SM\n    NA --&gt; |Reads| SM\n    TA --&gt; |Monitors| SM</code></pre>"},{"location":"content/architecture/agents/#core-components","title":"Core Components","text":""},{"location":"content/architecture/agents/#story-graph","title":"Story Graph","text":"<p>Central Orchestrator</p> <p>The Story Graph acts as the central nervous system, coordinating all agents and managing the game's workflow.</p> <ul> <li>Key Features<ul> <li>Workflow orchestration</li> <li>Parallel processing</li> <li>State management</li> <li>Error handling</li> </ul> </li> </ul>"},{"location":"content/architecture/agents/#rules-agent","title":"Rules Agent","text":"<p>Rule Engine</p> <p>The Rules Agent validates game mechanics and ensures consistency of actions.</p> <ul> <li>Key Features<ul> <li>Rule validation</li> <li>Constraint checking</li> <li>Game mechanics</li> <li>State validation</li> </ul> </li> </ul>"},{"location":"content/architecture/agents/#decision-agent","title":"Decision Agent","text":"<p>Decision Processor</p> <p>The Decision Agent analyzes player choices and determines outcomes using LLM-based processing.</p> <ul> <li>Key Features<ul> <li>Choice analysis</li> <li>Outcome determination</li> <li>LLM integration</li> <li>Rule compliance</li> </ul> </li> </ul>"},{"location":"content/architecture/agents/#narrator-agent","title":"Narrator Agent","text":"<p>Content Generator</p> <p>The Narrator Agent manages content generation and presentation.</p> <ul> <li>Key Features<ul> <li>Content generation</li> <li>Text formatting</li> <li>Style management</li> <li>Narrative consistency</li> </ul> </li> </ul>"},{"location":"content/architecture/agents/#trace-agent","title":"Trace Agent","text":"<p>System Monitor</p> <p>The Trace Agent handles logging, monitoring, and analytics.</p> <ul> <li>Key Features<ul> <li>Event logging</li> <li>Analytics</li> <li>Monitoring</li> <li>Debugging</li> </ul> </li> </ul>"},{"location":"content/architecture/agents/#communication-flow","title":"Communication Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant SG as Story Graph\n    participant AG as Agents\n    participant ST as State\n\n    U-&gt;&gt;SG: Action\n\n    par Agent Processing\n        SG-&gt;&gt;AG: Process Rules\n        SG-&gt;&gt;AG: Generate Content\n        SG-&gt;&gt;AG: Make Decision\n    end\n\n    AG--&gt;&gt;SG: Results\n    SG-&gt;&gt;ST: Update State\n    SG-&gt;&gt;U: Response</code></pre>"},{"location":"content/architecture/agents/#implementation-details","title":"Implementation Details","text":""},{"location":"content/architecture/agents/#protocol-based-design","title":"Protocol-Based Design","text":"<p>The system uses protocols for agent interfaces:</p> <pre><code>class AgentProtocol(Protocol):\n    \"\"\"Base protocol for all agents.\"\"\"\n\n    async def initialize(self) -&gt; None:\n        \"\"\"Initialize agent resources.\"\"\"\n        ...\n\n    async def process(self, context: Context) -&gt; Result:\n        \"\"\"Process agent-specific logic.\"\"\"\n        ...\n</code></pre>"},{"location":"content/architecture/agents/#state-management","title":"State Management","text":"<p>State is managed immutably:</p> <pre><code>class GameState(BaseModel):\n    \"\"\"Immutable game state.\"\"\"\n\n    section: int\n    context: Dict[str, Any]\n    history: List[Event]\n    metadata: Dict[str, Any]\n</code></pre>"},{"location":"content/architecture/agents/#best-practices","title":"Best Practices","text":"<ol> <li>Agent Design</li> <li>Single Responsibility Principle</li> <li>Protocol-based interfaces</li> <li>Immutable state</li> <li> <p>Error boundaries</p> </li> <li> <p>Communication</p> </li> <li>Async processing</li> <li>Type safety</li> <li>Error handling</li> <li> <p>State validation</p> </li> <li> <p>Performance</p> </li> <li>Parallel execution</li> <li>State caching</li> <li>Resource management</li> <li>Memory efficiency</li> </ol>"},{"location":"content/architecture/agents/#neurosymbolic-integration","title":"Neurosymbolic Integration","text":"<p>The system combines:</p> <ol> <li>Neural Components</li> <li>LLM-based processing</li> <li>Pattern recognition</li> <li>Natural language understanding</li> <li> <p>Content generation</p> </li> <li> <p>Symbolic Components</p> </li> <li>Rule systems</li> <li>State machines</li> <li>Logic validation</li> <li>Structured data</li> </ol> <p>This hybrid approach provides:</p> <ul> <li>Rich reasoning capabilities</li> <li>Natural language interaction</li> <li>Rule-based consistency</li> <li>Structured workflow</li> </ul>"},{"location":"content/architecture/agents/#workflow-generation","title":"Workflow Generation","text":"<p>The system supports automatic workflow generation:</p> <ol> <li>Input Processing</li> <li>Story scripts</li> <li>Game rules</li> <li> <p>Content templates</p> </li> <li> <p>Graph Generation</p> </li> <li>Node creation</li> <li>Edge definition</li> <li> <p>State mapping</p> </li> <li> <p>Agent Integration</p> </li> <li>Role assignment</li> <li>Protocol binding</li> <li>State management</li> </ol>"},{"location":"content/architecture/agents/decision/","title":"Decision Agent","text":"<p>Overview</p> <p>The Decision Agent is responsible for processing and analyzing player choices, determining outcomes, and managing the game's decision-making logic using LLM-based analysis.</p>"},{"location":"content/architecture/agents/decision/#core-architecture","title":"Core Architecture","text":"<pre><code>graph TD\n    subgraph Decision Agent\n        DA[Decision Agent] --&gt; DM[Decision Manager]\n        DA --&gt; AM[Analysis Module]\n    end\n\n    subgraph Components\n        AM --&gt; LA[LLM Analyzer]\n        AM --&gt; RC[Rules Checker]\n        AM --&gt; OD[Outcome Determiner]\n    end\n\n    DA --&gt; |Validates| Rules[Rules Agent]\n    DA --&gt; |Updates| State[Game State]</code></pre>"},{"location":"content/architecture/agents/decision/#key-components","title":"Key Components","text":""},{"location":"content/architecture/agents/decision/#decision-processing","title":"Decision Processing","text":"FeaturesImplementation <ul> <li> <p>Input Analysis</p> <ul> <li>Player choice analysis</li> <li>Context evaluation</li> <li>Rule validation</li> </ul> </li> <li> <p>Outcome Determination</p> <ul> <li>Next section selection</li> <li>Condition evaluation</li> <li>State updates</li> </ul> </li> <li> <p>LLM Integration</p> <ul> <li>Semantic understanding</li> <li>Context awareness</li> <li>Response analysis</li> </ul> </li> </ul> <pre><code>class DecisionAgent:\n    async def analyze_response(\n        self,\n        section_number: int,\n        user_response: str,\n        rules: Dict\n    ) -&gt; AnalysisResult:\n        messages = [\n            SystemMessage(content=self.system_prompt),\n            HumanMessage(content=f\"\"\"\n                Section: {section_number}\n                Response: {user_response}\n                Rules: {json.dumps(rules, indent=2)}\n            \"\"\")\n        ]\n\n        # LLM Analysis\n        response = await self.llm.ainvoke(messages)\n\n        # Parse and validate\n        result = json.loads(response.content)\n        return AnalysisResult(\n            next_section=result[\"next_section\"],\n            conditions=result.get(\"conditions\", []),\n            analysis=result.get(\"analysis\", \"\")\n        )\n</code></pre>"},{"location":"content/architecture/agents/decision/#analysis-system","title":"Analysis System","text":"<p>The Decision Agent analyzes through multiple stages:</p> <ol> <li>Input Processing</li> <li>Player choice parsing</li> <li>Context extraction</li> <li> <p>Rule gathering</p> </li> <li> <p>Decision Logic</p> </li> <li>LLM-based analysis</li> <li>Rule validation</li> <li> <p>Outcome determination</p> </li> <li> <p>Result Generation</p> </li> <li>Next section selection</li> <li>Condition evaluation</li> <li>State update preparation</li> </ol>"},{"location":"content/architecture/agents/decision/#decision-flow","title":"Decision Flow","text":"<pre><code>sequenceDiagram\n    participant P as Player\n    participant DA as Decision Agent\n    participant LLM as LLM Analyzer\n    participant RA as Rules Agent\n    participant ST as State\n\n    P-&gt;&gt;DA: Make Choice\n    DA-&gt;&gt;ST: Get Context\n    DA-&gt;&gt;RA: Get Rules\n    DA-&gt;&gt;LLM: Analyze Choice\n\n    par Analysis\n        LLM-&gt;&gt;LLM: Process Context\n        LLM-&gt;&gt;LLM: Apply Rules\n        LLM-&gt;&gt;LLM: Determine Outcome\n    end\n\n    LLM--&gt;&gt;DA: Analysis Result\n    DA-&gt;&gt;RA: Validate Outcome\n    DA-&gt;&gt;ST: Update State\n    DA--&gt;&gt;P: Response</code></pre>"},{"location":"content/architecture/agents/decision/#best-practices","title":"Best Practices","text":"<ol> <li>Analysis Design</li> <li>Clear context building</li> <li>Comprehensive rule checking</li> <li> <p>Robust error handling</p> </li> <li> <p>LLM Integration</p> </li> <li>Structured prompts</li> <li>Response validation</li> <li> <p>Error recovery</p> </li> <li> <p>Performance</p> </li> <li>Response caching</li> <li>Parallel validation</li> <li>State optimization</li> </ol>"},{"location":"content/architecture/agents/decision/#error-handling","title":"Error Handling","text":"<p>The Decision Agent implements robust error handling:</p> <pre><code>try:\n    # Analyze decision\n    result = await self._analyze_decision(context)\n\n    # Validate with rules\n    if await self.rules_agent.validate(result):\n        return result\n    raise DecisionError(\"Invalid decision outcome\")\n\nexcept DecisionError as e:\n    logger.error(\"Decision error: {}\", str(e))\n    return DecisionResult(\n        valid=False,\n        error=str(e),\n        fallback_section=context.current_section\n    )\n</code></pre>"},{"location":"content/architecture/agents/decision/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>LLM Optimization</li> <li>Prompt engineering</li> <li>Response caching</li> <li> <p>Batch processing</p> </li> <li> <p>Validation Strategy</p> </li> <li>Early validation</li> <li>Rule prioritization</li> <li> <p>Cache management</p> </li> <li> <p>State Management</p> </li> <li>Efficient updates</li> <li>Change tracking</li> <li>Memory optimization</li> </ol>"},{"location":"content/architecture/agents/decision/#integration-points","title":"Integration Points","text":"<ol> <li>Rules Agent</li> <li>Rule validation</li> <li>Constraint checking</li> <li> <p>Mechanics enforcement</p> </li> <li> <p>State Manager</p> </li> <li>Context retrieval</li> <li>State updates</li> <li> <p>History tracking</p> </li> <li> <p>Story Graph</p> </li> <li>Flow control</li> <li>Section transitions</li> <li>Event processing</li> </ol>"},{"location":"content/architecture/agents/narrator/","title":"Narrator Agent","text":"<p>Overview</p> <p>The Narrator Agent is responsible for generating and managing game content, formatting responses, and maintaining narrative consistency using LLM-based generation.</p>"},{"location":"content/architecture/agents/narrator/#core-architecture","title":"Core Architecture","text":"<pre><code>graph TD\n    subgraph Narrator Agent\n        NA[Narrator Agent] --&gt; NM[Narrator Manager]\n        NA --&gt; GM[Generation Module]\n    end\n\n    subgraph Components\n        GM --&gt; CG[Content Generator]\n        GM --&gt; TF[Text Formatter]\n        GM --&gt; SC[Style Controller]\n    end\n\n    NA --&gt; |Validates| Rules[Rules Agent]\n    NA --&gt; |Updates| State[Game State]</code></pre>"},{"location":"content/architecture/agents/narrator/#key-components","title":"Key Components","text":""},{"location":"content/architecture/agents/narrator/#content-generation","title":"Content Generation","text":"FeaturesImplementation <ul> <li> <p>Narrative Generation</p> <ul> <li>Scene description</li> <li>Character dialogue</li> <li>Action narration</li> </ul> </li> <li> <p>Content Adaptation</p> <ul> <li>Context awareness</li> <li>Style consistency</li> <li>Tone management</li> </ul> </li> <li> <p>LLM Integration</p> <ul> <li>Prompt engineering</li> <li>Response formatting</li> <li>Style control</li> </ul> </li> </ul> <pre><code>class NarratorAgent:\n    async def generate_content(\n        self,\n        context: NarrativeContext,\n        style: NarrativeStyle\n    ) -&gt; NarrativeContent:\n        # Build prompt with context and style\n        prompt = self._build_narrative_prompt(context, style)\n\n        # Generate content using LLM\n        response = await self.llm.ainvoke(prompt)\n\n        # Format and structure the response\n        return await self._format_narrative(response, style)\n</code></pre>"},{"location":"content/architecture/agents/narrator/#formatting-system","title":"Formatting System","text":"<p>The Narrator Agent formats content through multiple stages:</p> <ol> <li>Content Structure</li> <li>Scene organization</li> <li>Dialogue formatting</li> <li> <p>Description layout</p> </li> <li> <p>Style Application</p> </li> <li>Tone consistency</li> <li>Language adaptation</li> <li> <p>Theme maintenance</p> </li> <li> <p>Output Formatting</p> </li> <li>Markdown formatting</li> <li>HTML generation</li> <li>Text styling</li> </ol>"},{"location":"content/architecture/agents/narrator/#narrative-flow","title":"Narrative Flow","text":"<pre><code>sequenceDiagram\n    participant SG as Story Graph\n    participant NA as Narrator Agent\n    participant LLM as LLM Generator\n    participant ST as State\n\n    SG-&gt;&gt;NA: Request Content\n    NA-&gt;&gt;ST: Get Context\n    NA-&gt;&gt;LLM: Generate Content\n\n    par Generation\n        LLM-&gt;&gt;LLM: Process Context\n        LLM-&gt;&gt;LLM: Apply Style\n        LLM-&gt;&gt;LLM: Generate Text\n    end\n\n    LLM--&gt;&gt;NA: Raw Content\n    NA-&gt;&gt;NA: Format Content\n    NA-&gt;&gt;ST: Update State\n    NA--&gt;&gt;SG: Formatted Response</code></pre>"},{"location":"content/architecture/agents/narrator/#best-practices","title":"Best Practices","text":"<ol> <li>Content Generation</li> <li>Clear context building</li> <li>Style consistency</li> <li> <p>Error recovery</p> </li> <li> <p>LLM Integration</p> </li> <li>Structured prompts</li> <li>Response validation</li> <li> <p>Style control</p> </li> <li> <p>Performance</p> </li> <li>Content caching</li> <li>Batch processing</li> <li>Memory management</li> </ol>"},{"location":"content/architecture/agents/narrator/#error-handling","title":"Error Handling","text":"<p>The Narrator Agent implements comprehensive error handling:</p> <pre><code>try:\n    # Generate content\n    content = await self._generate_content(context)\n\n    # Format and validate\n    if await self._validate_content(content):\n        return await self._format_content(content)\n    raise NarratorError(\"Invalid content generated\")\n\nexcept NarratorError as e:\n    logger.error(\"Narration error: {}\", str(e))\n    return NarrativeContent(\n        valid=False,\n        error=str(e),\n        fallback_content=self._get_fallback_content()\n    )\n</code></pre>"},{"location":"content/architecture/agents/narrator/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Generation Optimization</li> <li>Prompt caching</li> <li>Response memoization</li> <li> <p>Batch processing</p> </li> <li> <p>Formatting Strategy</p> </li> <li>Template system</li> <li>Style sheets</li> <li> <p>Content reuse</p> </li> <li> <p>State Management</p> </li> <li>Context caching</li> <li>Style persistence</li> <li>Memory efficiency</li> </ol>"},{"location":"content/architecture/agents/narrator/#integration-points","title":"Integration Points","text":"<ol> <li>Story Graph</li> <li>Flow control</li> <li>Content requests</li> <li> <p>State updates</p> </li> <li> <p>Rules Agent</p> </li> <li>Content validation</li> <li>Context checking</li> <li> <p>Style enforcement</p> </li> <li> <p>State Manager</p> </li> <li>Context retrieval</li> <li>History tracking</li> <li>Style management</li> </ol>"},{"location":"content/architecture/agents/narrator/#style-system","title":"Style System","text":"<p>The Narrator manages different narrative styles:</p> <pre><code>class NarrativeStyle:\n    def __init__(self):\n        self.tone: str  # e.g., \"dramatic\", \"humorous\"\n        self.language: str  # e.g., \"formal\", \"casual\"\n        self.perspective: str  # e.g., \"first_person\", \"third_person\"\n        self.formatting: Dict[str, str]  # Style-specific formatting\n</code></pre>"},{"location":"content/architecture/agents/narrator/#content-templates","title":"Content Templates","text":"<p>The agent uses templates for consistent formatting:</p> <pre><code>TEMPLATES = {\n    \"scene\": \"\"\"\n    # {scene_title}\n\n    {scene_description}\n\n    ## Available Actions\n    {actions}\n    \"\"\",\n\n    \"dialogue\": \"\"\"\n    **{speaker}**: {dialogue}\n    \"\"\",\n\n    \"action\": \"\"\"\n    &gt; {action_description}\n    \"\"\"\n}\n</code></pre>"},{"location":"content/architecture/agents/rules/","title":"Rules Agent","text":"<p>Overview</p> <p>The Rules Agent is responsible for validating game rules, managing constraints, and ensuring game mechanics are properly enforced.</p>"},{"location":"content/architecture/agents/rules/#core-architecture","title":"Core Architecture","text":"<pre><code>graph TD\n    subgraph Rules Agent\n        RA[Rules Agent] --&gt; RM[Rules Manager]\n        RA --&gt; VM[Validation Module]\n    end\n\n    subgraph Components\n        VM --&gt; RV[Rule Validator]\n        VM --&gt; CV[Constraint Validator]\n        VM --&gt; MV[Mechanics Validator]\n    end\n\n    RA --&gt; |Uses| Cache[Cache System]\n    RA --&gt; |Updates| State[Game State]</code></pre>"},{"location":"content/architecture/agents/rules/#key-components","title":"Key Components","text":""},{"location":"content/architecture/agents/rules/#rules-management","title":"Rules Management","text":"FeaturesImplementation <ul> <li> <p>Rule Processing</p> <ul> <li>Rule interpretation</li> <li>Context validation</li> <li>Condition checking</li> </ul> </li> <li> <p>Constraint System</p> <ul> <li>Game mechanics</li> <li>Player limitations</li> <li>World rules</li> </ul> </li> <li> <p>Validation Logic</p> <ul> <li>Action validation</li> <li>State consistency</li> <li>Rule dependencies</li> </ul> </li> </ul> <pre><code>class RulesAgent:\n    async def validate(self, action: Action, state: GameState) -&gt; bool:\n        # Check basic constraints\n        if not await self._validate_basic_constraints(action, state):\n            return False\n\n        # Validate game mechanics\n        if not await self._validate_mechanics(action, state):\n            return False\n\n        # Check complex rules\n        return await self._validate_complex_rules(action, state)\n</code></pre>"},{"location":"content/architecture/agents/rules/#validation-system","title":"Validation System","text":"<p>The Rules Agent validates through multiple layers:</p> <ol> <li>Basic Constraints</li> <li>Action validity</li> <li>Player permissions</li> <li> <p>Resource availability</p> </li> <li> <p>Game Mechanics</p> </li> <li>Combat rules</li> <li>Skill checks</li> <li> <p>Resource management</p> </li> <li> <p>Complex Rules</p> </li> <li>Quest conditions</li> <li>Story progression</li> <li>World state</li> </ol>"},{"location":"content/architecture/agents/rules/#rule-processing","title":"Rule Processing","text":"Rule TypesImplementation <ul> <li> <p>Static Rules</p> <ul> <li>Core game mechanics</li> <li>Basic constraints</li> <li>Invariant conditions</li> </ul> </li> <li> <p>Dynamic Rules</p> <ul> <li>Context-dependent</li> <li>State-based</li> <li>Temporal rules</li> </ul> </li> <li> <p>Meta Rules</p> <ul> <li>Rule interactions</li> <li>Rule priorities</li> <li>Rule conflicts</li> </ul> </li> </ul> <pre><code>class RulesAgent:\n    async def process_rules(self, context: RuleContext) -&gt; RuleResult:\n        # Process static rules\n        static_result = await self._process_static_rules(context)\n        if not static_result.valid:\n            return static_result\n\n        # Process dynamic rules\n        dynamic_result = await self._process_dynamic_rules(context)\n        if not dynamic_result.valid:\n            return dynamic_result\n\n        # Process meta rules\n        return await self._process_meta_rules(context)\n</code></pre>"},{"location":"content/architecture/agents/rules/#validation-flow","title":"Validation Flow","text":"<pre><code>sequenceDiagram\n    participant SG as Story Graph\n    participant RA as Rules Agent\n    participant RM as Rules Manager\n    participant ST as State\n\n    SG-&gt;&gt;RA: Validate Action\n    RA-&gt;&gt;RM: Get Rules\n    RM--&gt;&gt;RA: Rules\n    RA-&gt;&gt;ST: Get Current State\n    ST--&gt;&gt;RA: State\n\n    par Rule Processing\n        RA-&gt;&gt;RA: Process Static Rules\n        RA-&gt;&gt;RA: Process Dynamic Rules\n        RA-&gt;&gt;RA: Process Meta Rules\n    end\n\n    RA--&gt;&gt;SG: Validation Result</code></pre>"},{"location":"content/architecture/agents/rules/#best-practices","title":"Best Practices","text":"<ol> <li>Rule Design</li> <li>Keep rules atomic</li> <li>Define clear hierarchies</li> <li>Document dependencies</li> <li> <p>Handle conflicts</p> </li> <li> <p>Validation</p> </li> <li>Validate early</li> <li>Fail fast</li> <li>Provide clear errors</li> <li> <p>Cache results</p> </li> <li> <p>Performance</p> </li> <li>Optimize hot paths</li> <li>Cache rule results</li> <li>Batch validations</li> <li>Profile regularly</li> </ol>"},{"location":"content/architecture/agents/rules/#error-handling","title":"Error Handling","text":"<p>The Rules Agent implements comprehensive error handling:</p> <pre><code>try:\n    # Validate rules\n    result = await self._validate_rules(context)\n    return result\nexcept RulesError as e:\n    # Handle rule-specific errors\n    logger.error(\"Rule validation error: {}\", str(e))\n    return RuleResult(valid=False, error=str(e))\nexcept Exception as e:\n    # Handle unexpected errors\n    logger.error(\"Unexpected error in rules: {}\", str(e))\n    return RuleResult(valid=False, error=\"Internal rules error\")\n</code></pre>"},{"location":"content/architecture/agents/rules/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Caching Strategy</li> <li>Rule results caching</li> <li>State caching</li> <li> <p>Cache invalidation</p> </li> <li> <p>Optimization</p> </li> <li>Rule prioritization</li> <li>Early termination</li> <li> <p>Parallel validation</p> </li> <li> <p>Resource Management</p> </li> <li>Memory efficiency</li> <li>CPU utilization</li> <li>Cache size control</li> </ol>"},{"location":"content/architecture/agents/story-graph/","title":"Story Graph Agent","text":"<p>Overview</p> <p>The Story Graph Agent is the central orchestrator of CASYS RPG, managing workflow and coordinating all other agents using LangGraph.</p>"},{"location":"content/architecture/agents/story-graph/#core-architecture","title":"Core Architecture","text":"<pre><code>graph TD\n    subgraph Story Graph\n        WF[Workflow Manager] --&gt; SG[Story Graph]\n        SG --&gt; SM[State Manager]\n    end\n\n    subgraph Nodes\n        N1[Start Node] --&gt; N2[Rules Node]\n        N1 --&gt; N3[Narrator Node]\n        N2 --&gt; N4[Decision Node]\n        N3 --&gt; N4\n        N4 --&gt; N5[End Node]\n    end\n\n    SG --&gt; |Manages| Nodes</code></pre>"},{"location":"content/architecture/agents/story-graph/#key-components","title":"Key Components","text":""},{"location":"content/architecture/agents/story-graph/#workflow-management","title":"Workflow Management","text":"FeaturesImplementation <ul> <li> <p>Node System</p> <ul> <li>Start/End nodes</li> <li>Agent-specific nodes</li> <li>Parallel processing</li> </ul> </li> <li> <p>State Transitions</p> <ul> <li>Section management</li> <li>State validation</li> <li>Error handling</li> </ul> </li> <li> <p>Flow Control</p> <ul> <li>Fan-out operations</li> <li>Fan-in aggregation</li> <li>Conditional branching</li> </ul> </li> </ul> <pre><code>class StoryGraph:\n    async def _setup_workflow(self) -&gt; None:\n        self._graph = StateGraph(GameState)\n\n        # Add nodes\n        self._graph.add_node(\"node_start\", self.workflow_manager.start_workflow)\n        self._graph.add_node(\"node_rules\", self._process_rules)\n        self._graph.add_node(\"node_narrator\", self._process_narrative)\n        self._graph.add_node(\"node_decision\", self._process_decision)\n        self._graph.add_node(\"node_end\", self.workflow_manager.end_workflow)\n\n        # Add edges\n        self._graph.add_edge(START, \"node_start\")\n        self._graph.add_edge(\"node_start\", [\"node_rules\", \"node_narrator\"])\n        self._graph.add_edge([\"node_rules\", \"node_narrator\"], \"node_decision\")\n</code></pre>"},{"location":"content/architecture/agents/story-graph/#state-management","title":"State Management","text":"<p>The Story Graph manages game state through:</p> <ol> <li>State Validation</li> <li>Input validation</li> <li>State consistency checks</li> <li> <p>Error detection</p> </li> <li> <p>State Transitions</p> </li> <li>Section progression</li> <li>State updates</li> <li> <p>History tracking</p> </li> <li> <p>Checkpoint System</p> </li> <li>State persistence</li> <li>Recovery points</li> <li>Rollback capability</li> </ol>"},{"location":"content/architecture/agents/story-graph/#agent-coordination","title":"Agent Coordination","text":"<p>The Story Graph coordinates other agents through:</p> Coordination PatternsImplementation <ul> <li> <p>Parallel Processing</p> <ul> <li>Rules and Narrator agents run in parallel</li> <li>Results aggregated for Decision agent</li> <li>Trace agent logs all operations</li> </ul> </li> <li> <p>State Sharing</p> <ul> <li>Immutable state objects</li> <li>Validated transitions</li> <li>Cached results</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Agent-specific errors</li> <li>Graceful degradation</li> <li>Recovery strategies</li> </ul> </li> </ul> <pre><code>class StoryGraph:\n    async def process_event(self, event: GameEvent) -&gt; GameState:\n        # Initialize workflow if needed\n        if not self._graph:\n            await self._setup_workflow()\n\n        try:\n            # Process event through workflow\n            result = await self._graph.process({\n                \"event\": event,\n                \"state\": await self.state_manager.get_current_state()\n            })\n\n            return result\n\n        except Exception as e:\n            return await self.workflow_manager.handle_error(e)\n</code></pre>"},{"location":"content/architecture/agents/story-graph/#communication-flow","title":"Communication Flow","text":"<pre><code>sequenceDiagram\n    participant WF as Workflow Manager\n    participant SG as Story Graph\n    participant SM as State Manager\n    participant AG as Agents\n\n    WF-&gt;&gt;SG: Start Workflow\n    SG-&gt;&gt;SM: Get Current State\n\n    par Parallel Processing\n        SG-&gt;&gt;AG: Process Rules\n        SG-&gt;&gt;AG: Generate Narrative\n    end\n\n    AG--&gt;&gt;SG: Results\n    SG-&gt;&gt;AG: Make Decision\n    AG--&gt;&gt;SG: Decision\n    SG-&gt;&gt;SM: Update State\n    SG-&gt;&gt;WF: Complete Workflow</code></pre>"},{"location":"content/architecture/agents/story-graph/#best-practices","title":"Best Practices","text":"<ol> <li>Graph Design</li> <li>Keep nodes focused and simple</li> <li>Use parallel processing when possible</li> <li>Implement proper error boundaries</li> <li> <p>Monitor node performance</p> </li> <li> <p>State Management</p> </li> <li>Validate all state changes</li> <li>Use immutable state objects</li> <li>Implement checkpoints</li> <li> <p>Handle edge cases</p> </li> <li> <p>Agent Coordination</p> </li> <li>Define clear protocols</li> <li>Use type hints</li> <li>Handle timeouts</li> <li>Log interactions</li> </ol>"},{"location":"content/architecture/agents/story-graph/#error-handling","title":"Error Handling","text":"<p>The Story Graph implements robust error handling:</p> <pre><code>try:\n    # Process workflow\n    result = await self._graph.process(input_data)\n    return result\nexcept GameError as e:\n    # Handle game-specific errors\n    return await self.workflow_manager.handle_error(e)\nexcept Exception as e:\n    # Handle unexpected errors\n    logger.error(\"Unexpected error in workflow: {}\", str(e))\n    return await self.workflow_manager.handle_error(e)\n</code></pre>"},{"location":"content/architecture/agents/story-graph/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Parallelization</li> <li>Parallel agent execution</li> <li>Async/await patterns</li> <li> <p>Resource pooling</p> </li> <li> <p>Caching</p> </li> <li>State caching</li> <li>Result memoization</li> <li> <p>Hot path optimization</p> </li> <li> <p>Memory Management</p> </li> <li>State cleanup</li> <li>Resource release</li> <li>Memory monitoring</li> </ol>"},{"location":"content/architecture/agents/trace/","title":"Trace Agent","text":"<p>Overview</p> <p>The Trace Agent is responsible for logging, monitoring, and analyzing the game's state changes, player actions, and system events. It provides essential debugging information and analytics capabilities.</p>"},{"location":"content/architecture/agents/trace/#core-architecture","title":"Core Architecture","text":"<pre><code>graph TD\n    subgraph Trace Agent\n        TA[Trace Agent] --&gt; TM[Trace Manager]\n        TA --&gt; AM[Analytics Module]\n    end\n\n    subgraph Components\n        AM --&gt; DL[Data Logger]\n        AM --&gt; SA[Stats Analyzer]\n        AM --&gt; PM[Performance Monitor]\n    end\n\n    TA --&gt; |Logs| Storage[Storage System]\n    TA --&gt; |Analyzes| State[Game State]</code></pre>"},{"location":"content/architecture/agents/trace/#key-components","title":"Key Components","text":""},{"location":"content/architecture/agents/trace/#trace-system","title":"Trace System","text":"FeaturesImplementation <ul> <li> <p>Event Logging</p> <ul> <li>State changes</li> <li>Player actions</li> <li>System events</li> </ul> </li> <li> <p>Analytics</p> <ul> <li>Performance metrics</li> <li>Player statistics</li> <li>System health</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>Real-time tracking</li> <li>Error detection</li> <li>Resource usage</li> </ul> </li> </ul> <pre><code>class TraceAgent:\n    async def log_event(\n        self,\n        event_type: str,\n        data: Dict[str, Any],\n        metadata: Optional[Dict] = None\n    ) -&gt; None:\n        timestamp = datetime.utcnow().isoformat()\n\n        trace_entry = TraceEntry(\n            timestamp=timestamp,\n            event_type=event_type,\n            data=data,\n            metadata=metadata or {}\n        )\n\n        await self.trace_manager.store_trace(trace_entry)\n</code></pre>"},{"location":"content/architecture/agents/trace/#analytics-system","title":"Analytics System","text":"<p>The Trace Agent processes data through multiple stages:</p> <ol> <li>Data Collection</li> <li>Event capture</li> <li>State snapshots</li> <li> <p>Performance metrics</p> </li> <li> <p>Analysis</p> </li> <li>Pattern detection</li> <li>Trend analysis</li> <li> <p>Anomaly detection</p> </li> <li> <p>Reporting</p> </li> <li>Stats generation</li> <li>Alert triggering</li> <li>Log aggregation</li> </ol>"},{"location":"content/architecture/agents/trace/#trace-flow","title":"Trace Flow","text":"<pre><code>sequenceDiagram\n    participant AG as Game Agents\n    participant TA as Trace Agent\n    participant TM as Trace Manager\n    participant ST as Storage\n\n    AG-&gt;&gt;TA: Log Event\n\n    par Processing\n        TA-&gt;&gt;TA: Format Data\n        TA-&gt;&gt;TA: Add Metadata\n        TA-&gt;&gt;TA: Validate Entry\n    end\n\n    TA-&gt;&gt;TM: Store Trace\n    TM-&gt;&gt;ST: Persist Data\n\n    opt Analytics\n        TA-&gt;&gt;TA: Analyze Patterns\n        TA-&gt;&gt;TA: Generate Stats\n    end</code></pre>"},{"location":"content/architecture/agents/trace/#best-practices","title":"Best Practices","text":"<ol> <li>Logging Strategy</li> <li>Structured logging</li> <li>Context preservation</li> <li> <p>Performance impact</p> </li> <li> <p>Data Management</p> </li> <li>Efficient storage</li> <li>Data rotation</li> <li> <p>Privacy compliance</p> </li> <li> <p>Analysis</p> </li> <li>Real-time processing</li> <li>Pattern detection</li> <li>Resource efficiency</li> </ol>"},{"location":"content/architecture/agents/trace/#error-handling","title":"Error Handling","text":"<p>The Trace Agent implements robust error handling:</p> <pre><code>try:\n    # Log trace entry\n    await self._log_entry(entry)\n\n    # Process analytics if needed\n    if entry.requires_analysis:\n        await self._process_analytics(entry)\n\nexcept TraceError as e:\n    logger.error(\"Trace error: {}\", str(e))\n    # Use fallback logging\n    await self._fallback_log(entry, error=str(e))\nexcept Exception as e:\n    logger.error(\"Unexpected error in trace: {}\", str(e))\n    # Ensure critical data is not lost\n    await self._emergency_log(entry)\n</code></pre>"},{"location":"content/architecture/agents/trace/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Logging Optimization</li> <li>Batch processing</li> <li>Async logging</li> <li> <p>Buffer management</p> </li> <li> <p>Storage Strategy</p> </li> <li>Data compression</li> <li>Index optimization</li> <li> <p>Cleanup policies</p> </li> <li> <p>Resource Management</p> </li> <li>Memory efficiency</li> <li>I/O optimization</li> <li>CPU utilization</li> </ol>"},{"location":"content/architecture/agents/trace/#integration-points","title":"Integration Points","text":"<ol> <li>Story Graph</li> <li>Workflow tracking</li> <li>State transitions</li> <li> <p>Event logging</p> </li> <li> <p>State Manager</p> </li> <li>State changes</li> <li>History tracking</li> <li> <p>Checkpoint logging</p> </li> <li> <p>Other Agents</p> </li> <li>Action logging</li> <li>Decision tracking</li> <li>Error reporting</li> </ol>"},{"location":"content/architecture/agents/trace/#analytics-features","title":"Analytics Features","text":"<p>The Trace Agent provides various analytics capabilities:</p> <pre><code>class Analytics:\n    async def analyze_patterns(self, timeframe: str) -&gt; Dict[str, Any]:\n        \"\"\"Analyze patterns in traced data.\"\"\"\n        return await self._pattern_analysis(timeframe)\n\n    async def generate_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"Generate statistical reports.\"\"\"\n        return await self._stats_generation()\n\n    async def detect_anomalies(self) -&gt; List[Anomaly]:\n        \"\"\"Detect anomalies in system behavior.\"\"\"\n        return await self._anomaly_detection()\n</code></pre>"},{"location":"content/architecture/agents/trace/#monitoring-system","title":"Monitoring System","text":"<p>The agent includes a comprehensive monitoring system:</p> <pre><code>class Monitor:\n    def __init__(self):\n        self.metrics: Dict[str, Metric] = {}\n        self.alerts: List[Alert] = []\n        self.thresholds: Dict[str, float] = {}\n\n    async def check_health(self) -&gt; HealthStatus:\n        \"\"\"Check system health metrics.\"\"\"\n        return await self._health_check()\n\n    async def trigger_alert(self, condition: str) -&gt; None:\n        \"\"\"Trigger system alerts.\"\"\"\n        await self._alert_handling(condition)\n</code></pre>"},{"location":"content/architecture/api/","title":"API Architecture","text":"<p>Overview</p> <p>CASYS RPG exposes its functionality through a FastAPI-based REST and WebSocket API. The API is designed to be robust, performant, and developer-friendly.</p>"},{"location":"content/architecture/api/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph API Layer\n        FA[FastAPI App] --&gt; RR[REST Routes]\n        FA --&gt; WR[WebSocket Routes]\n        FA --&gt; DT[DTOs]\n        FA --&gt; MD[Middleware]\n    end\n\n    subgraph Components\n        RR --&gt; EP[Endpoints]\n        WR --&gt; WS[WebSocket]\n        DT --&gt; SE[Serialization]\n        MD --&gt; AU[Auth]\n    end\n\n    subgraph Integration\n        EP --&gt; MN[Managers]\n        WS --&gt; AG[Agents]\n        SE --&gt; ST[State]\n    end</code></pre>"},{"location":"content/architecture/api/#core-components","title":"Core Components","text":""},{"location":"content/architecture/api/#fastapi-application","title":"FastAPI Application","text":"<pre><code>app = FastAPI(\n    title=\"CASYS RPG API\",\n    description=\"API pour le jeu de r\u00f4le CASYS\",\n    version=\"1.0.0\",\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\",\n    openapi_url=\"/openapi.json\",\n    lifespan=lifespan\n)\n</code></pre>"},{"location":"content/architecture/api/#configuration","title":"Configuration","text":"<pre><code># Configuration\nAPI_HOST = os.getenv(\"CASYS_HOST\", \"127.0.0.1\")\nAPI_PORT = int(os.getenv(\"CASYS_PORT\", \"8000\"))\nBASE_DIR = Path(os.path.dirname(os.path.abspath(__file__)))\n\n# Storage configuration\ndef get_storage_config() -&gt; StorageConfig:\n    \"\"\"Get storage configuration.\"\"\"\n    return StorageConfig.get_default_config(BASE_DIR / \"data\")\n</code></pre>"},{"location":"content/architecture/api/#api-structure","title":"API Structure","text":""},{"location":"content/architecture/api/#rest-routes","title":"REST Routes","text":"<ul> <li> <p>Game Management</p> <ul> <li>State operations</li> <li>Game flow control</li> <li>Character management</li> <li>Rules processing</li> </ul> </li> <li> <p>Content Management</p> <ul> <li>Narrative content</li> <li>Decision handling</li> <li>Event tracking</li> </ul> </li> </ul>"},{"location":"content/architecture/api/#websocket-routes","title":"WebSocket Routes","text":"<ul> <li> <p>Real-time Updates</p> <ul> <li>State synchronization</li> <li>Event notifications</li> <li>Interactive gameplay</li> </ul> </li> <li> <p>Game Flow</p> <ul> <li>Story progression</li> <li>Decision making</li> <li>Character updates</li> </ul> </li> </ul>"},{"location":"content/architecture/api/#data-transfer-objects","title":"Data Transfer Objects","text":""},{"location":"content/architecture/api/#requestresponse-models","title":"Request/Response Models","text":"<pre><code>from pydantic import BaseModel\n\nclass GameStateDTO(BaseModel):\n    \"\"\"Game state data transfer object.\"\"\"\n    id: UUID\n    version: int\n    character: CharacterModel\n    narrative: NarratorModel\n    rules: RulesModel\n    decision: DecisionModel\n    trace: TraceModel\n</code></pre>"},{"location":"content/architecture/api/#error-handling","title":"Error Handling","text":""},{"location":"content/architecture/api/#exception-management","title":"Exception Management","text":"<pre><code>@app.exception_handler(Exception)\nasync def global_exception_handler(\n    request: Request,\n    exc: Exception\n) -&gt; JSONResponse:\n    \"\"\"Global exception handler.\"\"\"\n\n    if isinstance(exc, GameError):\n        return JSONResponse(\n            status_code=400,\n            content={\"error\": str(exc)}\n        )\n\n    # Log unexpected errors\n    logger.error(f\"Unexpected error: {exc}\")\n    return JSONResponse(\n        status_code=500,\n        content={\"error\": \"Internal server error\"}\n    )\n</code></pre>"},{"location":"content/architecture/api/#api-documentation","title":"API Documentation","text":""},{"location":"content/architecture/api/#openapi-schema","title":"OpenAPI Schema","text":"<pre><code>def custom_openapi():\n    \"\"\"Custom OpenAPI schema configuration.\"\"\"\n    if app.openapi_schema:\n        return app.openapi_schema\n\n    openapi_schema = get_openapi(\n        title=\"CASYS RPG API\",\n        version=\"1.0.0\",\n        description=\"API pour le jeu de r\u00f4le CASYS\",\n        routes=app.routes\n    )\n\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n</code></pre>"},{"location":"content/architecture/api/#middleware","title":"Middleware","text":""},{"location":"content/architecture/api/#cors-configuration","title":"CORS Configuration","text":"<pre><code>app.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"]\n)\n</code></pre>"},{"location":"content/architecture/api/#integration-points","title":"Integration Points","text":""},{"location":"content/architecture/api/#with-managers","title":"With Managers","text":"<pre><code>from managers.dependencies import get_agent_manager\n\nasync def process_game_action(\n    action: GameAction,\n    manager: AgentManagerProtocol = Depends(get_agent_manager)\n) -&gt; GameState:\n    \"\"\"Process a game action using the agent manager.\"\"\"\n    return await manager.process_action(action)\n</code></pre>"},{"location":"content/architecture/api/#with-websocket","title":"With WebSocket","text":"<pre><code>@app.websocket(\"/ws/game/{game_id}\")\nasync def game_websocket(\n    websocket: WebSocket,\n    game_id: str,\n    manager: AgentManagerProtocol = Depends(get_agent_manager)\n):\n    \"\"\"WebSocket endpoint for game updates.\"\"\"\n    await websocket.accept()\n    try:\n        while True:\n            data = await websocket.receive_json()\n            response = await manager.process_ws_message(data)\n            await websocket.send_json(response)\n    except WebSocketDisconnect:\n        logger.info(f\"WebSocket disconnected: {game_id}\")\n</code></pre>"},{"location":"content/architecture/api/#best-practices","title":"Best Practices","text":"<ol> <li> <p>API Design</p> <ul> <li>Clear endpoints</li> <li>Proper validation</li> <li>Consistent responses</li> <li>Error handling</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Efficient routing</li> <li>Proper caching</li> <li>Async operations</li> <li>Resource management</li> </ul> </li> <li> <p>Security</p> <ul> <li>Input validation</li> <li>Error handling</li> <li>Rate limiting</li> <li>Authentication</li> </ul> </li> <li> <p>Documentation</p> <ul> <li>Clear descriptions</li> <li>Example responses</li> <li>Error scenarios</li> <li>Authentication details</li> </ul> </li> </ol>"},{"location":"content/architecture/api/dto/","title":"Data Transfer Objects","text":"<p>Overview</p> <p>DTOs (Data Transfer Objects) in CASYS RPG handle the serialization and deserialization of data between the API layer and the domain models.</p>"},{"location":"content/architecture/api/dto/#dto-architecture","title":"DTO Architecture","text":"<pre><code>graph TD\n    subgraph DTOs\n        RD[Request DTOs] --&gt; CV[Converters]\n        SD[Response DTOs] --&gt; CV\n        CV --&gt; DM[Domain Models]\n    end\n\n    subgraph Validation\n        RD --&gt; VA[Validation]\n        SD --&gt; VA\n    end\n\n    subgraph Serialization\n        CV --&gt; SE[Serialization]\n        SE --&gt; JS[JSON]\n    end</code></pre>"},{"location":"content/architecture/api/dto/#request-dtos","title":"Request DTOs","text":""},{"location":"content/architecture/api/dto/#game-initialization","title":"Game Initialization","text":"<pre><code>class GameInitRequest(BaseModel):\n    \"\"\"Game initialization request.\n\n    Future extensions:\n    - player_id: Player identification\n    - settings: Game-specific parameters\n    \"\"\"\n    player_id: Optional[str] = None\n    settings: Optional[Dict[str, Any]] = None\n</code></pre>"},{"location":"content/architecture/api/dto/#player-actions","title":"Player Actions","text":"<pre><code>class ActionRequest(BaseModel):\n    \"\"\"Player action request.\"\"\"\n    game_id: str\n    action_type: str\n    data: Dict[str, Any]\n\nclass ChoiceRequest(BaseModel):\n    \"\"\"Player choice request.\"\"\"\n    game_id: str\n    choice_id: str\n    choice_text: str\n    metadata: Optional[Dict[str, Any]] = None\n\nclass ResponseRequest(BaseModel):\n    \"\"\"Player response request.\"\"\"\n    game_id: str\n    response: str\n    metadata: Optional[Dict[str, Any]] = None\n</code></pre>"},{"location":"content/architecture/api/dto/#feedback","title":"Feedback","text":"<pre><code>class FeedbackRequest(BaseModel):\n    \"\"\"User feedback request.\"\"\"\n    game_id: str\n    feedback_type: str\n    content: str\n    metadata: Optional[Dict[str, Any]] = None\n</code></pre>"},{"location":"content/architecture/api/dto/#response-dtos","title":"Response DTOs","text":""},{"location":"content/architecture/api/dto/#game-state","title":"Game State","text":"<pre><code>class GameResponse(BaseModel):\n    \"\"\"Game response with state.\"\"\"\n    success: bool = True\n    message: Optional[str] = None\n    game_id: Optional[str] = None\n    state: Dict[str, Any]\n</code></pre>"},{"location":"content/architecture/api/dto/#action-results","title":"Action Results","text":"<pre><code>class ActionResponse(BaseModel):\n    \"\"\"Response to a game action.\"\"\"\n    success: bool = True\n    message: Optional[str] = None\n    action_result: Optional[Dict[str, Any]] = None\n    state: Optional[Dict[str, Any]] = None\n    error: Optional[str] = None\n</code></pre>"},{"location":"content/architecture/api/dto/#system-status","title":"System Status","text":"<pre><code>class HealthResponse(BaseModel):\n    \"\"\"Health check response model.\"\"\"\n    status: str\n    message: str\n    timestamp: str\n    version: Optional[str] = None\n    type: Optional[str] = None\n</code></pre>"},{"location":"content/architecture/api/dto/#converters","title":"Converters","text":""},{"location":"content/architecture/api/dto/#state-conversion","title":"State Conversion","text":"<pre><code>def to_game_state(data: Dict[str, Any]) -&gt; GameState:\n    \"\"\"Convert API data to GameState model.\"\"\"\n    return GameState(**data)\n\ndef from_game_state(state: GameState) -&gt; Dict[str, Any]:\n    \"\"\"Convert GameState model to API response data.\"\"\"\n    return state.model_dump(\n        exclude_none=True,    # Exclude None fields\n        by_alias=True,        # Use aliases for serialization\n        exclude_unset=True    # Exclude unset fields\n    )\n</code></pre>"},{"location":"content/architecture/api/dto/#feedback-conversion","title":"Feedback Conversion","text":"<pre><code>def to_domain_feedback(\n    request: FeedbackRequest\n) -&gt; DomainFeedbackRequest:\n    \"\"\"Convert FeedbackRequest DTO to domain model.\"\"\"\n    return DomainFeedbackRequest(\n        content=request.content,\n        feedback_type=request.feedback_type,\n        session_id=request.game_id,\n        metadata=request.metadata or {}\n    )\n</code></pre>"},{"location":"content/architecture/api/dto/#integration-examples","title":"Integration Examples","text":""},{"location":"content/architecture/api/dto/#with-routes","title":"With Routes","text":"<pre><code>@game_router_rest.post(\"/initialize\")\nasync def initialize_game(\n    init_request: GameInitRequest,\n    agent_mgr: AgentManager = Depends(get_agent_manager)\n) -&gt; GameResponse:\n    \"\"\"Initialize game with DTO.\"\"\"\n    game_state = await agent_mgr.initialize_game()\n    state_dict = from_game_state(game_state)\n    return GameResponse(\n        success=True,\n        game_id=state_dict[\"game_id\"],\n        state=state_dict\n    )\n</code></pre>"},{"location":"content/architecture/api/dto/#with-websocket","title":"With WebSocket","text":"<pre><code>async def handle_ws_message(\n    message: Dict[str, Any],\n    websocket: WebSocket\n) -&gt; None:\n    \"\"\"Handle WebSocket message with DTOs.\"\"\"\n    if message[\"type\"] == \"choice\":\n        choice = ChoiceRequest(**message)\n        response = await process_choice(choice)\n        await websocket.send_json(\n            ActionResponse(\n                success=True,\n                action_result=response\n            ).model_dump()\n        )\n</code></pre>"},{"location":"content/architecture/api/dto/#best-practices","title":"Best Practices","text":"<ol> <li> <p>DTO Design</p> <ul> <li>Clear separation from domain models</li> <li>Proper validation</li> <li>Minimal dependencies</li> <li>Clear documentation</li> </ul> </li> <li> <p>Conversion</p> <ul> <li>Type safety</li> <li>Proper serialization</li> <li>Error handling</li> <li>Performance optimization</li> </ul> </li> <li> <p>Validation</p> <ul> <li>Input validation</li> <li>Type checking</li> <li>Error messages</li> <li>Security checks</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Clean interfaces</li> <li>Error handling</li> <li>Performance</li> <li>Maintainability</li> </ul> </li> </ol>"},{"location":"content/architecture/api/routes/","title":"API Routes","text":"<p>Overview</p> <p>CASYS RPG's API routes are divided into REST endpoints for standard operations and WebSocket endpoints for real-time updates.</p>"},{"location":"content/architecture/api/routes/#route-architecture","title":"Route Architecture","text":"<pre><code>graph TD\n    subgraph REST Routes\n        RR[REST Router] --&gt; GR[Game Routes]\n        RR --&gt; HR[Health Routes]\n        RR --&gt; UR[Utility Routes]\n    end\n\n    subgraph WebSocket Routes\n        WR[WS Router] --&gt; GW[Game WebSocket]\n        GW --&gt; CM[Connection Manager]\n    end\n\n    subgraph Integration\n        GR --&gt; AM[Agent Manager]\n        GW --&gt; AM\n    end</code></pre>"},{"location":"content/architecture/api/routes/#rest-routes","title":"REST Routes","text":""},{"location":"content/architecture/api/routes/#game-management","title":"Game Management","text":"Initialize GameGet Game State <pre><code>@game_router_rest.post(\"/api/game/initialize\")\nasync def initialize_game(\n    init_request: GameInitRequest,\n    agent_mgr: AgentManager = Depends(get_agent_manager)\n) -&gt; GameResponse:\n    \"\"\"Initialize a new game session.\"\"\"\n    try:\n        game_state = await agent_mgr.initialize_game()\n        state_dict = from_game_state(game_state)\n        return GameResponse(\n            success=True,\n            game_id=state_dict[\"game_id\"],\n            state=state_dict,\n            message=\"Game initialized successfully\"\n        )\n    except Exception as e:\n        logger.error(f\"Failed to initialize game: {e}\")\n        raise HTTPException(\n            status_code=500,\n            detail=str(e)\n        )\n</code></pre> <pre><code>@game_router_rest.get(\"/api/game/state/{game_id}\")\nasync def get_game_state(\n    game_id: Optional[str] = None,\n    agent_mgr: AgentManager = Depends(get_agent_manager)\n) -&gt; GameResponse:\n    \"\"\"Get current game state.\"\"\"\n    try:\n        game_state = await agent_mgr.get_game_state(game_id)\n        state_dict = from_game_state(game_state)\n        return GameResponse(\n            success=True,\n            game_id=game_id,\n            state=state_dict,\n            message=\"Game state retrieved successfully\"\n        )\n    except Exception as e:\n        logger.error(f\"Failed to get game state: {e}\")\n        raise HTTPException(\n            status_code=404,\n            detail=str(e)\n        )\n</code></pre>"},{"location":"content/architecture/api/routes/#health-check","title":"Health Check","text":"<pre><code>@health_router_rest.get(\"/health\")\nasync def health_check():\n    \"\"\"API health check endpoint.\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.utcnow()\n    }\n</code></pre>"},{"location":"content/architecture/api/routes/#utility-routes","title":"Utility Routes","text":"<pre><code>@utils_router_rest.get(\"/utils/info\")\nasync def get_api_info():\n    \"\"\"Get API information.\"\"\"\n    return {\n        \"version\": \"1.0.0\",\n        \"endpoints\": [\n            \"REST: /api/game/*\",\n            \"WebSocket: /ws/game\"\n        ]\n    }\n</code></pre>"},{"location":"content/architecture/api/routes/#websocket-routes","title":"WebSocket Routes","text":""},{"location":"content/architecture/api/routes/#connection-manager","title":"Connection Manager","text":"<pre><code>class GameWSConnectionManager:\n    \"\"\"Manages WebSocket connections.\"\"\"\n\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        \"\"\"Connect and initialize WebSocket.\"\"\"\n        try:\n            await websocket.accept()\n            self.active_connections.append(websocket)\n            return True\n        except Exception as e:\n            logger.error(f\"Connection error: {e}\")\n            return False\n\n    async def broadcast(self, message: dict):\n        \"\"\"Broadcast to all connections.\"\"\"\n        for connection in self.active_connections:\n            try:\n                await connection.send_text(\n                    json.dumps(message, default=_json_serial)\n                )\n            except Exception as e:\n                logger.error(f\"Broadcast error: {e}\")\n                await self.handle_error(connection)\n</code></pre>"},{"location":"content/architecture/api/routes/#game-websocket","title":"Game WebSocket","text":"<pre><code>@game_router_ws.websocket(\"/ws/game\")\nasync def game_websocket_endpoint(\n    websocket: WebSocket,\n    agent_mgr: AgentManager = Depends(get_agent_manager)\n):\n    \"\"\"WebSocket endpoint for game updates.\"\"\"\n    try:\n        # Connect\n        if not await ws_manager.connect(websocket):\n            return\n\n        # Main loop\n        while True:\n            try:\n                # Receive message\n                data = await websocket.receive_json()\n\n                # Process message\n                if data[\"type\"] == \"choice\":\n                    choice = ChoiceRequest(**data)\n                    response = await agent_mgr.process_choice(choice)\n\n                # Broadcast update\n                await ws_manager.broadcast({\n                    \"type\": \"update\",\n                    \"data\": response\n                })\n\n            except WebSocketDisconnect:\n                ws_manager.disconnect(websocket)\n                break\n\n    except Exception as e:\n        logger.error(f\"WebSocket error: {e}\")\n        await ws_manager.handle_error(websocket)\n</code></pre>"},{"location":"content/architecture/api/routes/#integration-points","title":"Integration Points","text":""},{"location":"content/architecture/api/routes/#with-agent-manager","title":"With Agent Manager","text":"<pre><code>class GameRoute:\n    \"\"\"Game route integration with AgentManager.\"\"\"\n\n    def __init__(self, agent_mgr: AgentManager):\n        self.agent_mgr = agent_mgr\n\n    async def process_action(self, action: dict) -&gt; GameState:\n        \"\"\"Process game action.\"\"\"\n        return await self.agent_mgr.process_action(action)\n\n    async def update_state(self, state: dict) -&gt; None:\n        \"\"\"Update game state.\"\"\"\n        await self.agent_mgr.update_state(state)\n</code></pre>"},{"location":"content/architecture/api/routes/#with-websocket-manager","title":"With WebSocket Manager","text":"<pre><code>class WSIntegration:\n    \"\"\"WebSocket integration with managers.\"\"\"\n\n    def __init__(\n        self,\n        ws_manager: GameWSConnectionManager,\n        agent_mgr: AgentManager\n    ):\n        self.ws_manager = ws_manager\n        self.agent_mgr = agent_mgr\n\n    async def handle_update(self, update: dict):\n        \"\"\"Handle state update.\"\"\"\n        # Process update\n        response = await self.agent_mgr.process_update(update)\n\n        # Broadcast to clients\n        await self.ws_manager.broadcast(response)\n</code></pre>"},{"location":"content/architecture/api/routes/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Route Design</p> <ul> <li>Clear endpoints</li> <li>Proper validation</li> <li>Error handling</li> <li>Documentation</li> </ul> </li> <li> <p>WebSocket Management</p> <ul> <li>Connection handling</li> <li>Error recovery</li> <li>State synchronization</li> <li>Performance optimization</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Clean interfaces</li> <li>Dependency injection</li> <li>Error propagation</li> <li>Resource management</li> </ul> </li> <li> <p>Security</p> <ul> <li>Input validation</li> <li>Rate limiting</li> <li>Authentication</li> <li>Error handling</li> </ul> </li> </ol>"},{"location":"content/architecture/api/websocket/","title":"WebSocket System","text":"<p>Overview</p> <p>CASYS RPG uses WebSockets for real-time bidirectional communication between the server and clients, enabling features like live game state updates and interactive gameplay.</p>"},{"location":"content/architecture/api/websocket/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph WebSocket System\n        WS[WebSocket Server] --&gt; CM[Connection Manager]\n        WS --&gt; HB[Heartbeat]\n        WS --&gt; ST[State Sync]\n    end\n\n    subgraph Handlers\n        CM --&gt; CO[Connection]\n        CM --&gt; DC[Disconnection]\n        CM --&gt; ER[Error]\n\n        HB --&gt; PI[Ping]\n        HB --&gt; PO[Pong]\n\n        ST --&gt; UP[Updates]\n        ST --&gt; BR[Broadcast]\n    end\n\n    subgraph Integration\n        WS --&gt; AM[Agent Manager]\n        WS --&gt; SE[Serialization]\n    end</code></pre>"},{"location":"content/architecture/api/websocket/#connection-management","title":"Connection Management","text":""},{"location":"content/architecture/api/websocket/#connection-manager","title":"Connection Manager","text":"<pre><code>class GameWSConnectionManager:\n    \"\"\"Manages WebSocket connections.\"\"\"\n\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        \"\"\"Connect and initialize WebSocket.\"\"\"\n        try:\n            await websocket.accept()\n            self.active_connections.append(websocket)\n            return True\n        except Exception as e:\n            logger.error(f\"Connection error: {e}\")\n            return False\n\n    def disconnect(self, websocket: WebSocket):\n        \"\"\"Handle client disconnection.\"\"\"\n        if websocket in self.active_connections:\n            self.active_connections.remove(websocket)\n\n    async def broadcast(self, message: dict):\n        \"\"\"Broadcast to all connections.\"\"\"\n        for connection in self.active_connections:\n            try:\n                await connection.send_text(\n                    json.dumps(message, default=_json_serial)\n                )\n            except Exception as e:\n                logger.error(f\"Broadcast error: {e}\")\n                await self.handle_error(connection)\n</code></pre>"},{"location":"content/architecture/api/websocket/#message-handling","title":"Message Handling","text":""},{"location":"content/architecture/api/websocket/#main-websocket-endpoint","title":"Main WebSocket Endpoint","text":"<pre><code>@game_router_ws.websocket(\"/ws/game\")\nasync def game_websocket_endpoint(\n    websocket: WebSocket,\n    agent_mgr: AgentManager = Depends(get_agent_manager)\n):\n    \"\"\"WebSocket endpoint for game updates.\"\"\"\n    # Connect\n    if not await ws_manager.connect(websocket):\n        return\n\n    try:\n        # Send initial state\n        initial_state = await agent_mgr.get_state()\n        if initial_state:\n            state_dict = from_game_state(initial_state)\n            await websocket.send_text(\n                json.dumps(state_dict, default=_json_serial)\n            )\n\n        # Main message loop\n        while True:\n            data = await websocket.receive_json()\n            await handle_message(data, websocket, agent_mgr)\n\n    except WebSocketDisconnect:\n        ws_manager.disconnect(websocket)\n    except Exception as e:\n        await ws_manager.handle_error(websocket)\n</code></pre>"},{"location":"content/architecture/api/websocket/#message-types","title":"Message Types","text":"State RequestPlayer ChoiceHeartbeat <pre><code>if data.get(\"type\") == \"get_state\":\n    current_state = await agent_mgr.get_state()\n    if current_state:\n        state_dict = from_game_state(current_state)\n        await websocket.send_text(\n            json.dumps(state_dict, default=_json_serial)\n        )\n</code></pre> <pre><code>elif data.get(\"type\") == \"choice\":\n    choice_data = data.get(\"choice\")\n    choice_request = ChoiceRequest(\n        game_id=choice_data.get(\"game_id\", \"\"),\n        choice_id=choice_data.get(\"choice_id\", \"\"),\n        choice_text=choice_data.get(\"choice_text\", \"\"),\n        metadata=choice_data.get(\"metadata\", {})\n    )\n\n    new_state = await agent_mgr.process_game_state(\n        user_input=choice_request.choice_text\n    )\n\n    if new_state:\n        state_dict = from_game_state(new_state)\n        await ws_manager.broadcast(state_dict)\n</code></pre> <pre><code>if data.get(\"type\") == \"ping\":\n    await websocket.send_json({\n        \"type\": \"pong\",\n        \"timestamp\": _json_serial(data.get(\"timestamp\"))\n    })\n</code></pre>"},{"location":"content/architecture/api/websocket/#error-handling","title":"Error Handling","text":""},{"location":"content/architecture/api/websocket/#websocket-errors","title":"WebSocket Errors","text":"<pre><code>async def handle_error(self, websocket: WebSocket):\n    \"\"\"Handle WebSocket errors.\"\"\"\n    try:\n        if websocket.client_state != WebSocketState.DISCONNECTED:\n            await websocket.close(code=status.WS_1011_INTERNAL_ERROR)\n    except Exception as e:\n        logger.error(f\"Error closing WebSocket: {e}\")\n    finally:\n        self.disconnect(websocket)\n</code></pre>"},{"location":"content/architecture/api/websocket/#message-errors","title":"Message Errors","text":"<pre><code>try:\n    # Process message\n    await handle_message(data)\nexcept Exception as e:\n    logger.error(f\"Message error: {e}\")\n    await websocket.send_json({\n        \"error\": str(e),\n        \"status\": \"error\",\n        \"type\": \"message_error\"\n    })\n</code></pre>"},{"location":"content/architecture/api/websocket/#state-synchronization","title":"State Synchronization","text":""},{"location":"content/architecture/api/websocket/#broadcast-updates","title":"Broadcast Updates","text":"<pre><code>async def broadcast_state_update(\n    new_state: GameState,\n    ws_manager: GameWSConnectionManager\n):\n    \"\"\"Broadcast state update to all clients.\"\"\"\n    try:\n        state_dict = from_game_state(new_state)\n        await ws_manager.broadcast(state_dict)\n    except Exception as e:\n        logger.error(f\"Broadcast error: {e}\")\n</code></pre>"},{"location":"content/architecture/api/websocket/#state-validation","title":"State Validation","text":"<pre><code>async def validate_state_update(\n    state: Dict[str, Any],\n    agent_mgr: AgentManager\n) -&gt; bool:\n    \"\"\"Validate state update before broadcast.\"\"\"\n    try:\n        return await agent_mgr.validate_state(state)\n    except Exception as e:\n        logger.error(f\"Validation error: {e}\")\n        return False\n</code></pre>"},{"location":"content/architecture/api/websocket/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Connection Management</p> <ul> <li>Proper initialization</li> <li>Clean disconnection</li> <li>Error recovery</li> <li>Resource cleanup</li> </ul> </li> <li> <p>Message Handling</p> <ul> <li>Type validation</li> <li>Error handling</li> <li>Rate limiting</li> <li>Timeout handling</li> </ul> </li> <li> <p>State Management</p> <ul> <li>Atomic updates</li> <li>Validation</li> <li>Synchronization</li> <li>Conflict resolution</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Efficient serialization</li> <li>Connection pooling</li> <li>Message batching</li> <li>Resource optimization</li> </ul> </li> </ol>"},{"location":"content/architecture/managers/","title":"Manager System Architecture","text":"<p>Overview</p> <p>The manager layer provides a robust infrastructure for handling game state, business logic, and system operations. It follows a hierarchical structure with core managers orchestrating domain-specific managers through a dependency injection system.</p>"},{"location":"content/architecture/managers/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph Core Layer\n        AM[Agent Manager] --&gt; SM[State Manager]\n        AM --&gt; WM[Workflow Manager]\n        AM --&gt; CM[Cache Manager]\n    end\n\n    subgraph Domain Layer\n        RM[Rules Manager]\n        DM[Decision Manager]\n        NM[Narrator Manager]\n        TM[Trace Manager]\n        CHM[Character Manager]\n    end\n\n    subgraph Infrastructure\n        FA[Filesystem Adapter]\n        PR[Protocols]\n    end\n\n    AM --&gt; RM\n    AM --&gt; DM\n    AM --&gt; NM\n    AM --&gt; TM\n    AM --&gt; CHM\n\n    SM --&gt; FA\n    CM --&gt; FA\n\n    PR --&gt; |Defines| AM\n    PR --&gt; |Defines| RM\n    PR --&gt; |Defines| DM\n    PR --&gt; |Defines| NM\n    PR --&gt; |Defines| TM\n    PR --&gt; |Defines| CHM</code></pre>"},{"location":"content/architecture/managers/#core-components","title":"Core Components","text":""},{"location":"content/architecture/managers/#agent-manager","title":"Agent Manager","text":"<p>The Agent Manager serves as the central coordinator for all game agents and their interactions:</p> <ul> <li> <p>Responsibilities</p> <ul> <li>Agent lifecycle management</li> <li>Dependency injection</li> <li>Event coordination</li> <li>Error handling</li> </ul> </li> <li> <p>Key Features</p> <ul> <li>Protocol-based agent registration</li> <li>Asynchronous event processing</li> <li>State synchronization</li> <li>Resource management</li> </ul> </li> </ul>"},{"location":"content/architecture/managers/#state-manager","title":"State Manager","text":"<p>Handles all aspects of game state management:</p> <ul> <li> <p>Responsibilities</p> <ul> <li>State lifecycle</li> <li>Persistence</li> <li>Version control</li> <li>Event tracking</li> </ul> </li> <li> <p>Key Features</p> <ul> <li>Immutable state updates</li> <li>Transaction management</li> <li>State validation</li> <li>History tracking</li> </ul> </li> </ul>"},{"location":"content/architecture/managers/#cache-manager","title":"Cache Manager","text":"<p>Optimizes system performance through intelligent caching:</p> <ul> <li> <p>Responsibilities</p> <ul> <li>Memory management</li> <li>Cache invalidation</li> <li>Performance optimization</li> <li>Resource allocation</li> </ul> </li> <li> <p>Key Features</p> <ul> <li>Multi-level caching</li> <li>Invalidation strategies</li> <li>Memory monitoring</li> <li>Cache analytics</li> </ul> </li> </ul>"},{"location":"content/architecture/managers/#workflow-manager","title":"Workflow Manager","text":"<p>Controls game flow and process coordination:</p> <ul> <li> <p>Responsibilities</p> <ul> <li>Flow control</li> <li>Transition management</li> <li>Process coordination</li> <li>State machine logic</li> </ul> </li> <li> <p>Key Features</p> <ul> <li>Workflow definition</li> <li>State transitions</li> <li>Event handling</li> <li>Error recovery</li> </ul> </li> </ul>"},{"location":"content/architecture/managers/#domain-managers","title":"Domain Managers","text":"<p>Each domain manager specializes in a specific aspect of the game:</p> Rules ManagerDecision ManagerNarrator ManagerCharacter ManagerTrace Manager <ul> <li>Purpose: Manages game rules and mechanics</li> <li>Features:<ul> <li>Rule processing</li> <li>Validation logic</li> <li>Game mechanics</li> <li>Constraint checking</li> </ul> </li> </ul> <ul> <li>Purpose: Handles choice processing and outcomes</li> <li>Features:<ul> <li>Choice handling</li> <li>Outcome processing</li> <li>State transitions</li> <li>Decision validation</li> </ul> </li> </ul> <ul> <li>Purpose: Controls game content and presentation</li> <li>Features:<ul> <li>Content generation</li> <li>Response formatting</li> <li>Style control</li> <li>Narrative flow</li> </ul> </li> </ul> <ul> <li>Purpose: Manages character states and attributes</li> <li>Features:<ul> <li>Character state</li> <li>Attribute management</li> <li>Inventory control</li> <li>Status tracking</li> </ul> </li> </ul> <ul> <li>Purpose: Handles logging and analytics</li> <li>Features:<ul> <li>Event logging</li> <li>Analytics</li> <li>Debugging</li> <li>Performance tracking</li> </ul> </li> </ul>"},{"location":"content/architecture/managers/#protocol-system","title":"Protocol System","text":"<p>The manager system uses a protocol-based architecture:</p> <pre><code>class ManagerProtocol(Protocol):\n    \"\"\"Base protocol for all managers.\"\"\"\n\n    async def initialize(self) -&gt; None:\n        \"\"\"Initialize manager resources.\"\"\"\n        ...\n\n    async def shutdown(self) -&gt; None:\n        \"\"\"Clean up manager resources.\"\"\"\n        ...\n</code></pre>"},{"location":"content/architecture/managers/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Dependency Management</p> <ul> <li>Use protocol-based interfaces</li> <li>Implement proper lifecycle management</li> <li>Handle circular dependencies</li> <li>Maintain clear dependency graphs</li> </ul> </li> <li> <p>State Management</p> <ul> <li>Keep state immutable</li> <li>Validate state transitions</li> <li>Maintain audit trails</li> <li>Handle edge cases</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Implement proper error boundaries</li> <li>Use typed exceptions</li> <li>Provide detailed error context</li> <li>Ensure proper cleanup</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Optimize resource usage</li> <li>Implement proper caching</li> <li>Monitor memory consumption</li> <li>Profile critical paths</li> </ul> </li> </ol>"},{"location":"content/architecture/managers/#integration-points","title":"Integration Points","text":"<p>The manager system integrates with other components through:</p> <ol> <li> <p>Agent System</p> <ul> <li>State updates</li> <li>Event processing</li> <li>Resource coordination</li> </ul> </li> <li> <p>API Layer</p> <ul> <li>Request handling</li> <li>State management</li> <li>Error propagation</li> </ul> </li> <li> <p>Storage Layer</p> <ul> <li>Data persistence</li> <li>State recovery</li> <li>Cache management</li> </ul> </li> </ol>"},{"location":"content/architecture/managers/core/","title":"Core Managers","text":"<p>Overview</p> <p>Core managers form the backbone of the system, providing essential services for state management, caching, workflow control, and agent coordination.</p>"},{"location":"content/architecture/managers/core/#agent-manager","title":"Agent Manager","text":"<pre><code>graph TD\n    subgraph Agent Manager\n        AM[Agent Manager] --&gt; LC[Lifecycle Control]\n        AM --&gt; DI[Dependency Injection]\n        AM --&gt; EC[Event Coordination]\n    end\n\n    subgraph Services\n        LC --&gt; |Manages| AG[Agents]\n        DI --&gt; |Injects| DP[Dependencies]\n        EC --&gt; |Coordinates| EV[Events]\n    end\n\n    AM --&gt; |Uses| SM[State Manager]\n    AM --&gt; |Uses| CM[Cache Manager]\n    AM --&gt; |Uses| WM[Workflow Manager]</code></pre>"},{"location":"content/architecture/managers/core/#key-responsibilities","title":"Key Responsibilities","text":"<ul> <li> <p>Agent Lifecycle</p> <ul> <li>Initialization</li> <li>Resource allocation</li> <li>Shutdown handling</li> <li>Health monitoring</li> </ul> </li> <li> <p>Dependency Management</p> <ul> <li>Service registration</li> <li>Dependency resolution</li> <li>Scope management</li> <li>Circular dependency handling</li> </ul> </li> <li> <p>Event System</p> <ul> <li>Event propagation</li> <li>Error handling</li> <li>State synchronization</li> <li>Performance monitoring</li> </ul> </li> </ul>"},{"location":"content/architecture/managers/core/#state-manager","title":"State Manager","text":"<pre><code>graph TD\n    subgraph State Manager\n        SM[State Manager] --&gt; SL[State Lifecycle]\n        SM --&gt; TM[Transaction Manager]\n        SM --&gt; VM[Version Manager]\n    end\n\n    subgraph State Services\n        SL --&gt; |Manages| ST[States]\n        TM --&gt; |Controls| TR[Transactions]\n        VM --&gt; |Tracks| VE[Versions]\n    end\n\n    SM --&gt; |Uses| PS[Persistence]\n    SM --&gt; |Uses| VA[Validation]</code></pre>"},{"location":"content/architecture/managers/core/#key-features","title":"Key Features","text":"<ul> <li> <p>State Lifecycle</p> <ul> <li>Creation</li> <li>Updates</li> <li>Validation</li> <li>Cleanup</li> </ul> </li> <li> <p>Transaction Management</p> <ul> <li>ACID properties</li> <li>Rollback support</li> <li>Conflict resolution</li> <li>Consistency checks</li> </ul> </li> <li> <p>Version Control</p> <ul> <li>State versioning</li> <li>History tracking</li> <li>Rollback capabilities</li> <li>Audit trails</li> </ul> </li> </ul>"},{"location":"content/architecture/managers/core/#cache-manager","title":"Cache Manager","text":"<pre><code>graph TD\n    subgraph Cache Manager\n        CM[Cache Manager] --&gt; MM[Memory Manager]\n        CM --&gt; CI[Cache Invalidation]\n        CM --&gt; PM[Performance Monitor]\n    end\n\n    subgraph Cache Services\n        MM --&gt; |Manages| ME[Memory]\n        CI --&gt; |Controls| IV[Invalidation]\n        PM --&gt; |Monitors| PE[Performance]\n    end\n\n    CM --&gt; |Uses| ST[Storage]\n    CM --&gt; |Uses| AN[Analytics]</code></pre>"},{"location":"content/architecture/managers/core/#core-features","title":"Core Features","text":"<ul> <li> <p>Memory Management</p> <ul> <li>Resource allocation</li> <li>Memory monitoring</li> <li>Cleanup strategies</li> <li>Optimization</li> </ul> </li> <li> <p>Cache Control</p> <ul> <li>Invalidation rules</li> <li>Update strategies</li> <li>Priority management</li> <li>Size control</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Metrics collection</li> <li>Optimization</li> <li>Bottleneck detection</li> <li>Resource planning</li> </ul> </li> </ul>"},{"location":"content/architecture/managers/core/#workflow-manager","title":"Workflow Manager","text":"<pre><code>graph TD\n    subgraph Workflow Manager\n        WM[Workflow Manager] --&gt; FC[Flow Control]\n        WM --&gt; TM[Transition Manager]\n        WM --&gt; EM[Event Manager]\n    end\n\n    subgraph Workflow Services\n        FC --&gt; |Controls| FL[Flow]\n        TM --&gt; |Manages| TR[Transitions]\n        EM --&gt; |Handles| EV[Events]\n    end\n\n    WM --&gt; |Uses| SM[State Manager]\n    WM --&gt; |Uses| VA[Validation]</code></pre>"},{"location":"content/architecture/managers/core/#key-components","title":"Key Components","text":"<ul> <li> <p>Flow Control</p> <ul> <li>Process definition</li> <li>Flow validation</li> <li>State transitions</li> <li>Error handling</li> </ul> </li> <li> <p>Transition System</p> <ul> <li>State machine</li> <li>Validation rules</li> <li>Event handling</li> <li>Recovery mechanisms</li> </ul> </li> <li> <p>Event Management</p> <ul> <li>Event routing</li> <li>Processing rules</li> <li>Error recovery</li> <li>Monitoring</li> </ul> </li> </ul>"},{"location":"content/architecture/managers/core/#integration-patterns","title":"Integration Patterns","text":""},{"location":"content/architecture/managers/core/#inter-manager-communication","title":"Inter-Manager Communication","text":"<pre><code>class CoreManager:\n    async def coordinate(self, event: Event) -&gt; Result:\n        # Validate with state manager\n        if await self.state_manager.validate(event):\n            # Update cache\n            await self.cache_manager.update(event)\n\n            # Process workflow\n            result = await self.workflow_manager.process(event)\n\n            # Update state\n            await self.state_manager.update(result)\n\n            return result\n</code></pre>"},{"location":"content/architecture/managers/core/#error-handling","title":"Error Handling","text":"<pre><code>class CoreManager:\n    async def handle_error(self, error: Exception) -&gt; None:\n        # Log error\n        await self.trace_manager.log_error(error)\n\n        # Cleanup resources\n        await self.cleanup()\n\n        # Notify other managers\n        await self.notify_error(error)\n\n        # Attempt recovery\n        await self.recover()\n</code></pre>"},{"location":"content/architecture/managers/core/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Resource Management</p> <ul> <li>Proper initialization</li> <li>Clean shutdown</li> <li>Resource pooling</li> <li>Memory optimization</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Graceful degradation</li> <li>Recovery strategies</li> <li>Error boundaries</li> <li>Logging and monitoring</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Caching strategies</li> <li>Resource optimization</li> <li>Bottleneck prevention</li> <li>Monitoring and profiling</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Clear interfaces</li> <li>Proper abstraction</li> <li>Dependency management</li> <li>Event coordination</li> </ul> </li> </ol>"},{"location":"content/architecture/managers/domain/","title":"Domain Managers","text":"<p>Overview</p> <p>Domain managers handle specific aspects of the game logic, each focusing on a particular domain such as rules, decisions, narration, characters, and tracing.</p>"},{"location":"content/architecture/managers/domain/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph Domain Managers\n        RM[Rules Manager]\n        DM[Decision Manager]\n        NM[Narrator Manager]\n        CM[Character Manager]\n        TM[Trace Manager]\n    end\n\n    subgraph Core Services\n        AM[Agent Manager]\n        SM[State Manager]\n    end\n\n    AM --&gt; RM\n    AM --&gt; DM\n    AM --&gt; NM\n    AM --&gt; CM\n    AM --&gt; TM\n\n    RM --&gt; SM\n    DM --&gt; SM\n    NM --&gt; SM\n    CM --&gt; SM\n    TM --&gt; SM</code></pre>"},{"location":"content/architecture/managers/domain/#rules-manager","title":"Rules Manager","text":"<pre><code>graph TD\n    subgraph Rules Manager\n        RM[Rules Manager] --&gt; RP[Rule Processing]\n        RM --&gt; VM[Validation Module]\n        RM --&gt; GM[Game Mechanics]\n    end\n\n    subgraph Components\n        RP --&gt; |Processes| RU[Rules]\n        VM --&gt; |Validates| AC[Actions]\n        GM --&gt; |Manages| ME[Mechanics]\n    end</code></pre>"},{"location":"content/architecture/managers/domain/#key-features","title":"Key Features","text":"<ul> <li>Rule interpretation and processing</li> <li>Action validation</li> <li>Game mechanics management</li> <li>Constraint checking</li> <li>State validation</li> </ul>"},{"location":"content/architecture/managers/domain/#decision-manager","title":"Decision Manager","text":"<pre><code>graph TD\n    subgraph Decision Manager\n        DM[Decision Manager] --&gt; CP[Choice Processing]\n        DM --&gt; OP[Outcome Processing]\n        DM --&gt; TM[Transition Management]\n    end\n\n    subgraph Components\n        CP --&gt; |Processes| CH[Choices]\n        OP --&gt; |Determines| OC[Outcomes]\n        TM --&gt; |Manages| TR[Transitions]\n    end</code></pre>"},{"location":"content/architecture/managers/domain/#key-features_1","title":"Key Features","text":"<ul> <li>Choice validation and processing</li> <li>Outcome determination</li> <li>State transition management</li> <li>Decision history tracking</li> <li>Context analysis</li> </ul>"},{"location":"content/architecture/managers/domain/#narrator-manager","title":"Narrator Manager","text":"<pre><code>graph TD\n    subgraph Narrator Manager\n        NM[Narrator Manager] --&gt; CG[Content Generation]\n        NM --&gt; TF[Text Formatting]\n        NM --&gt; SM[Style Management]\n    end\n\n    subgraph Components\n        CG --&gt; |Generates| CO[Content]\n        TF --&gt; |Formats| TX[Text]\n        SM --&gt; |Controls| ST[Style]\n    end</code></pre>"},{"location":"content/architecture/managers/domain/#key-features_2","title":"Key Features","text":"<ul> <li>Content generation and management</li> <li>Text formatting and styling</li> <li>Narrative flow control</li> <li>Response customization</li> <li>Context-aware content</li> </ul>"},{"location":"content/architecture/managers/domain/#character-manager","title":"Character Manager","text":"<pre><code>graph TD\n    subgraph Character Manager\n        CM[Character Manager] --&gt; SM[State Management]\n        CM --&gt; AM[Attribute Management]\n        CM --&gt; IM[Inventory Management]\n    end\n\n    subgraph Components\n        SM --&gt; |Manages| ST[States]\n        AM --&gt; |Controls| AT[Attributes]\n        IM --&gt; |Handles| IN[Inventory]\n    end</code></pre>"},{"location":"content/architecture/managers/domain/#key-features_3","title":"Key Features","text":"<ul> <li>Character state management</li> <li>Attribute tracking and updates</li> <li>Inventory control</li> <li>Status effects</li> <li>Character progression</li> </ul>"},{"location":"content/architecture/managers/domain/#trace-manager","title":"Trace Manager","text":"<pre><code>graph TD\n    subgraph Trace Manager\n        TM[Trace Manager] --&gt; EL[Event Logging]\n        TM --&gt; AN[Analytics]\n        TM --&gt; DM[Debug Module]\n    end\n\n    subgraph Components\n        EL --&gt; |Logs| EV[Events]\n        AN --&gt; |Analyzes| DA[Data]\n        DM --&gt; |Debugs| IS[Issues]\n    end</code></pre>"},{"location":"content/architecture/managers/domain/#key-features_4","title":"Key Features","text":"<ul> <li>Event logging and tracking</li> <li>Analytics collection</li> <li>Debug information</li> <li>Performance monitoring</li> <li>History management</li> </ul>"},{"location":"content/architecture/managers/domain/#integration-patterns","title":"Integration Patterns","text":""},{"location":"content/architecture/managers/domain/#manager-communication","title":"Manager Communication","text":"<pre><code>class DomainManager:\n    async def process_event(self, event: Event) -&gt; Result:\n        # Validate with rules manager\n        if await self.rules_manager.validate(event):\n            # Process with specific logic\n            result = await self._process(event)\n\n            # Update character if needed\n            await self.character_manager.update(result)\n\n            # Log the event\n            await self.trace_manager.log(event, result)\n\n            return result\n</code></pre>"},{"location":"content/architecture/managers/domain/#state-updates","title":"State Updates","text":"<pre><code>class DomainManager:\n    async def update_state(self, update: StateUpdate) -&gt; None:\n        # Validate update\n        if await self.validate_update(update):\n            # Apply update\n            new_state = await self.state_manager.apply_update(update)\n\n            # Notify other managers\n            await self.notify_update(new_state)\n\n            # Log update\n            await self.trace_manager.log_update(update)\n</code></pre>"},{"location":"content/architecture/managers/domain/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Domain Separation</p> <ul> <li>Clear boundaries</li> <li>Single responsibility</li> <li>Minimal dependencies</li> <li>Clean interfaces</li> </ul> </li> <li> <p>State Management</p> <ul> <li>Atomic updates</li> <li>Validation</li> <li>History tracking</li> <li>Error handling</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Event-based communication</li> <li>Loose coupling</li> <li>Clear protocols</li> <li>Error boundaries</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Efficient processing</li> <li>Resource management</li> <li>Caching strategies</li> <li>Monitoring</li> </ul> </li> </ol>"},{"location":"content/architecture/models/","title":"Models Architecture","text":"<p>Overview</p> <p>The models layer provides the core data structures, type definitions, and dependency system that forms the foundation of CASYS RPG. It implements a robust type system using Pydantic v2 for validation and serialization.</p>"},{"location":"content/architecture/models/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph Core Models\n        GS[GameState] --&gt; CH[Character Model]\n        GS --&gt; RM[Rules Model]\n        GS --&gt; DM[Decision Model]\n        GS --&gt; NM[Narrator Model]\n        GS --&gt; TM[Trace Model]\n    end\n\n    subgraph Type System\n        TP[Types] --&gt; AT[Agent Types]\n        TP --&gt; MT[Manager Types]\n        TP --&gt; CT[Common Types]\n    end\n\n    subgraph Factory System\n        GF[Game Factory] --&gt; MF[Model Factory]\n        MF --&gt; GS\n    end\n\n    subgraph Dependencies\n        DP[Dependencies] --&gt; PR[Protocols]\n        PR --&gt; AT\n        PR --&gt; MT\n    end\n\n    GS --&gt; TP\n    DP --&gt; GF</code></pre>"},{"location":"content/architecture/models/#core-components","title":"Core Components","text":""},{"location":"content/architecture/models/#game-state","title":"Game State","text":"<p>The central state model managing all game data:</p> <ul> <li> <p>Structure</p> <ul> <li>Immutable state design</li> <li>Version control</li> <li>Event tracking</li> <li>Validation rules</li> </ul> </li> <li> <p>Components</p> <ul> <li>Character state</li> <li>Game rules</li> <li>Decision history</li> <li>Narrative context</li> <li>System metadata</li> </ul> </li> </ul>"},{"location":"content/architecture/models/#domain-models","title":"Domain Models","text":"<p>Specialized models for different aspects of the game:</p> Character ModelRules ModelDecision Model <ul> <li> <p>Features</p> <ul> <li>Attributes</li> <li>Inventory</li> <li>Skills</li> <li>Status effects</li> </ul> </li> <li> <p>Validation</p> <ul> <li>Attribute constraints</li> <li>State transitions</li> <li>Inventory limits</li> <li>Skill requirements</li> </ul> </li> </ul> <ul> <li> <p>Features</p> <ul> <li>Game mechanics</li> <li>Constraints</li> <li>Actions</li> <li>Conditions</li> </ul> </li> <li> <p>Validation</p> <ul> <li>Rule consistency</li> <li>Action validity</li> <li>State transitions</li> <li>Condition checking</li> </ul> </li> </ul> <ul> <li> <p>Features</p> <ul> <li>Choice structure</li> <li>Outcomes</li> <li>Conditions</li> <li>Analysis results</li> </ul> </li> <li> <p>Validation</p> <ul> <li>Choice validity</li> <li>Outcome consistency</li> <li>Condition logic</li> <li>State transitions</li> </ul> </li> </ul>"},{"location":"content/architecture/models/#type-system","title":"Type System","text":"<p>The type system provides strong typing and validation:</p> <pre><code>from typing import Union, Protocol, TypeVar\n\n# Type variables\nT = TypeVar('T')\nStateType = TypeVar('StateType', bound='GameState')\n\n# Protocol definitions\nclass ManagerProtocol(Protocol):\n    \"\"\"Base protocol for all managers.\"\"\"\n    async def initialize(self) -&gt; None: ...\n    async def process(self, context: T) -&gt; T: ...\n\n# Type aliases\nManagerTypes = Union[\n    StateManagerProtocol,\n    CacheManagerProtocol,\n    RulesManagerProtocol,\n    DecisionManagerProtocol,\n    NarratorManagerProtocol\n]\n</code></pre>"},{"location":"content/architecture/models/#type-categories","title":"Type Categories","text":"Agent TypesManager TypesCommon Types <ul> <li>Purpose: Define agent interfaces and behaviors</li> <li>Components:<ul> <li>Base agent protocol</li> <li>Specialized agent types</li> <li>Agent configurations</li> <li>State definitions</li> </ul> </li> </ul> <ul> <li>Purpose: Define manager interfaces and behaviors</li> <li>Components:<ul> <li>Manager protocols</li> <li>Service types</li> <li>Configuration types</li> <li>State handlers</li> </ul> </li> </ul> <ul> <li>Purpose: Shared type definitions</li> <li>Components:<ul> <li>Base types</li> <li>Enums</li> <li>Utility types</li> <li>State types</li> </ul> </li> </ul>"},{"location":"content/architecture/models/#dependency-system","title":"Dependency System","text":"<p>The dependency system manages component relationships:</p> <pre><code>sequenceDiagram\n    participant GF as Game Factory\n    participant DP as Dependencies\n    participant PR as Protocols\n    participant CM as Components\n\n    GF-&gt;&gt;DP: Register Dependencies\n    DP-&gt;&gt;PR: Resolve Protocols\n    PR-&gt;&gt;CM: Create Components\n    CM--&gt;&gt;GF: Return Instances</code></pre>"},{"location":"content/architecture/models/#key-features","title":"Key Features","text":"<ul> <li> <p>Protocol-Based Design</p> <ul> <li>Clear interfaces</li> <li>Type safety</li> <li>Dependency inversion</li> <li>Easy testing</li> </ul> </li> <li> <p>Dependency Resolution</p> <ul> <li>Automatic injection</li> <li>Lifecycle management</li> <li>Circular detection</li> <li>Scoped instances</li> </ul> </li> <li> <p>Service Management</p> <ul> <li>Component registration</li> <li>Instance caching</li> <li>Resource cleanup</li> <li>Error handling</li> </ul> </li> </ul>"},{"location":"content/architecture/models/#factory-system","title":"Factory System","text":"<p>The factory system handles object creation and initialization:</p> Game FactoryModel Factory <ul> <li>Purpose: Creates and configures game components</li> <li>Features:<ul> <li>Component creation</li> <li>Dependency injection</li> <li>Configuration loading</li> <li>State initialization</li> </ul> </li> </ul> <ul> <li>Purpose: Creates model instances</li> <li>Features:<ul> <li>Model validation</li> <li>Default values</li> <li>State initialization</li> <li>Type checking</li> </ul> </li> </ul>"},{"location":"content/architecture/models/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Model Design</p> <ul> <li>Use immutable models</li> <li>Implement proper validation</li> <li>Define clear interfaces</li> <li>Handle edge cases</li> </ul> </li> <li> <p>Type Safety</p> <ul> <li>Use strict typing</li> <li>Define protocols</li> <li>Validate at boundaries</li> <li>Handle type conversions</li> </ul> </li> <li> <p>Dependencies</p> <ul> <li>Follow SOLID principles</li> <li>Use dependency injection</li> <li>Manage lifecycles</li> <li>Handle errors</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Optimize validation</li> <li>Use efficient serialization</li> <li>Cache when appropriate</li> <li>Monitor memory usage</li> </ul> </li> </ol>"},{"location":"content/architecture/models/data-models/","title":"Domain Models","text":"<p>Overview</p> <p>Domain models represent the core business objects in CASYS RPG. Each model is built using Pydantic v2 for robust validation and serialization.</p>"},{"location":"content/architecture/models/data-models/#character-model","title":"Character Model","text":"<pre><code>graph TD\n    subgraph Character\n        CH[Character] --&gt; AT[Attributes]\n        CH --&gt; SK[Skills]\n        CH --&gt; IN[Inventory]\n        CH --&gt; ST[Status]\n    end\n\n    subgraph Components\n        AT --&gt; BS[Base Stats]\n        SK --&gt; AB[Abilities]\n        IN --&gt; IT[Items]\n        ST --&gt; EF[Effects]\n    end</code></pre>"},{"location":"content/architecture/models/data-models/#structure","title":"Structure","text":"<pre><code>class CharacterModel(BaseModel):\n    \"\"\"Character data model.\"\"\"\n\n    # Basic info\n    id: UUID\n    name: str\n    level: int\n\n    # Core attributes\n    attributes: AttributeSet\n    skills: SkillSet\n    inventory: Inventory\n    status: CharacterStatus\n\n    # State\n    current_health: int\n    max_health: int\n    experience: int\n\n    class Config:\n        validate_assignment = True\n</code></pre>"},{"location":"content/architecture/models/data-models/#rules-model","title":"Rules Model","text":"<pre><code>graph TD\n    subgraph Rules\n        RM[Rules Model] --&gt; GM[Game Mechanics]\n        RM --&gt; CN[Constraints]\n        RM --&gt; AC[Actions]\n    end\n\n    subgraph Components\n        GM --&gt; ME[Mechanics]\n        CN --&gt; CO[Conditions]\n        AC --&gt; VA[Validation]\n    end</code></pre>"},{"location":"content/architecture/models/data-models/#structure_1","title":"Structure","text":"<pre><code>class RulesModel(BaseModel):\n    \"\"\"Game rules model.\"\"\"\n\n    # Core rules\n    mechanics: Dict[str, GameMechanic]\n    constraints: List[Constraint]\n    actions: Dict[str, ActionRule]\n\n    # Validation\n    conditions: List[Condition]\n    validators: Dict[str, Validator]\n\n    def validate_action(self, action: Action) -&gt; bool:\n        \"\"\"Validate an action against rules.\"\"\"\n</code></pre>"},{"location":"content/architecture/models/data-models/#decision-model","title":"Decision Model","text":"<pre><code>graph TD\n    subgraph Decision\n        DM[Decision Model] --&gt; CH[Choices]\n        DM --&gt; OC[Outcomes]\n        DM --&gt; CD[Conditions]\n    end\n\n    subgraph Analysis\n        CH --&gt; VA[Validation]\n        OC --&gt; PR[Processing]\n        CD --&gt; EV[Evaluation]\n    end</code></pre>"},{"location":"content/architecture/models/data-models/#structure_2","title":"Structure","text":"<pre><code>class DecisionModel(BaseModel):\n    \"\"\"Decision processing model.\"\"\"\n\n    # Current decision\n    choices: List[Choice]\n    outcomes: Dict[str, Outcome]\n    conditions: List[Condition]\n\n    # Analysis\n    context: DecisionContext\n    history: List[Decision]\n\n    async def analyze_choice(self, choice: str) -&gt; AnalysisResult:\n        \"\"\"Analyze a player choice.\"\"\"\n</code></pre>"},{"location":"content/architecture/models/data-models/#narrator-model","title":"Narrator Model","text":"<pre><code>graph TD\n    subgraph Narrator\n        NM[Narrator Model] --&gt; CT[Content]\n        NM --&gt; ST[Style]\n        NM --&gt; FT[Format]\n    end\n\n    subgraph Generation\n        CT --&gt; GN[Generation]\n        ST --&gt; PR[Processing]\n        FT --&gt; FM[Formatting]\n    end</code></pre>"},{"location":"content/architecture/models/data-models/#structure_3","title":"Structure","text":"<pre><code>class NarratorModel(BaseModel):\n    \"\"\"Narrative content model.\"\"\"\n\n    # Content\n    current_scene: Scene\n    dialog_history: List[Dialog]\n\n    # Style\n    style_settings: StyleConfig\n    format_rules: FormatRules\n\n    async def generate_content(self, context: Context) -&gt; Content:\n        \"\"\"Generate narrative content.\"\"\"\n</code></pre>"},{"location":"content/architecture/models/data-models/#trace-model","title":"Trace Model","text":"<pre><code>graph TD\n    subgraph Trace\n        TM[Trace Model] --&gt; EV[Events]\n        TM --&gt; AN[Analytics]\n        TM --&gt; DB[Debug]\n    end\n\n    subgraph Processing\n        EV --&gt; LG[Logging]\n        AN --&gt; PR[Processing]\n        DB --&gt; TR[Tracking]\n    end</code></pre>"},{"location":"content/architecture/models/data-models/#structure_4","title":"Structure","text":"<pre><code>class TraceModel(BaseModel):\n    \"\"\"System tracing model.\"\"\"\n\n    # Event tracking\n    events: List[Event]\n    analytics: AnalyticsData\n    debug_info: DebugInfo\n\n    # Processing\n    processors: Dict[str, EventProcessor]\n    filters: List[EventFilter]\n\n    async def log_event(self, event: Event) -&gt; None:\n        \"\"\"Log a system event.\"\"\"\n</code></pre>"},{"location":"content/architecture/models/data-models/#model-validation","title":"Model Validation","text":""},{"location":"content/architecture/models/data-models/#base-validation","title":"Base Validation","text":"<pre><code>class BaseGameModel(BaseModel):\n    \"\"\"Base class for all game models.\"\"\"\n\n    @validator(\"*\")\n    def validate_fields(cls, v):\n        \"\"\"Base validation for all fields.\"\"\"\n        return v\n\n    class Config:\n        validate_assignment = True\n        extra = \"forbid\"\n</code></pre>"},{"location":"content/architecture/models/data-models/#custom-validators","title":"Custom Validators","text":"<pre><code>class CustomValidators:\n    \"\"\"Custom validation functions.\"\"\"\n\n    @staticmethod\n    def validate_health(value: int) -&gt; int:\n        \"\"\"Validate health values.\"\"\"\n        if value &lt; 0:\n            raise ValueError(\"Health cannot be negative\")\n        return value\n\n    @staticmethod\n    def validate_inventory(items: List[Item]) -&gt; List[Item]:\n        \"\"\"Validate inventory contents.\"\"\"\n        return items\n</code></pre>"},{"location":"content/architecture/models/data-models/#model-integration","title":"Model Integration","text":""},{"location":"content/architecture/models/data-models/#inter-model-communication","title":"Inter-Model Communication","text":"<pre><code>class ModelIntegration:\n    \"\"\"Handle model interactions.\"\"\"\n\n    async def update_models(\n        self,\n        character: CharacterModel,\n        rules: RulesModel,\n        action: Action\n    ) -&gt; Tuple[CharacterModel, RulesModel]:\n        \"\"\"Process model updates.\"\"\"\n\n        # Validate action\n        if await rules.validate_action(action):\n            # Update character\n            new_character = await character.apply_action(action)\n\n            # Update rules state\n            new_rules = await rules.process_action(action)\n\n            return new_character, new_rules\n</code></pre>"},{"location":"content/architecture/models/data-models/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Model Design</p> <ul> <li>Clear responsibilities</li> <li>Proper validation</li> <li>Type safety</li> <li>Error handling</li> </ul> </li> <li> <p>Validation</p> <ul> <li>Field-level validation</li> <li>Cross-field validation</li> <li>Custom validators</li> <li>Error messages</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Clean interfaces</li> <li>State consistency</li> <li>Error propagation</li> <li>Event handling</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Efficient validation</li> <li>Optimized processing</li> <li>Memory management</li> <li>Caching strategy</li> </ul> </li> </ol>"},{"location":"content/architecture/models/dependencies/","title":"Dependencies System","text":"<p>Overview</p> <p>The dependencies system in CASYS RPG manages component relationships and dependencies using protocols and dependency injection. It ensures loose coupling and maintainable code structure.</p>"},{"location":"content/architecture/models/dependencies/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph Dependency System\n        DI[Dependency Injection] --&gt; PR[Protocols]\n        DI --&gt; SR[Service Registry]\n        DI --&gt; LC[Lifecycle]\n    end\n\n    subgraph Protocols\n        PR --&gt; AP[Agent Protocols]\n        PR --&gt; MP[Manager Protocols]\n        PR --&gt; CP[Common Protocols]\n    end\n\n    subgraph Components\n        SR --&gt; AG[Agents]\n        SR --&gt; MN[Managers]\n        SR --&gt; SG[Story Graph]\n    end</code></pre>"},{"location":"content/architecture/models/dependencies/#protocol-system","title":"Protocol System","text":""},{"location":"content/architecture/models/dependencies/#manager-protocols","title":"Manager Protocols","text":"<pre><code># Type alias for manager protocols\nManagerProtocols = Union[\n    WorkflowManagerProtocol,\n    StateManagerProtocol,\n    CacheManagerProtocol,\n    CharacterManagerProtocol,\n    TraceManagerProtocol,\n    RulesManagerProtocol,\n    DecisionManagerProtocol,\n    NarratorManagerProtocol\n]\n</code></pre>"},{"location":"content/architecture/models/dependencies/#agent-protocols","title":"Agent Protocols","text":"<pre><code># Type alias for agent protocols\nAgentProtocols = Union[\n    NarratorAgentProtocol,\n    RulesAgentProtocol,\n    DecisionAgentProtocol,\n    TraceAgentProtocol\n]\n</code></pre>"},{"location":"content/architecture/models/dependencies/#component-management","title":"Component Management","text":""},{"location":"content/architecture/models/dependencies/#game-components","title":"Game Components","text":"<pre><code># Game components\n_game_factory: Optional[\"GameFactory\"] = None\n_agent_manager: Optional[AgentManagerProtocol] = None\n_game_components: Optional[tuple[\n    Dict[str, AgentProtocols],\n    Dict[str, ManagerProtocols]\n]] = None\n</code></pre>"},{"location":"content/architecture/models/dependencies/#component-resolution","title":"Component Resolution","text":"<pre><code>def get_agent_manager() -&gt; AgentManagerProtocol:\n    \"\"\"Get AgentManager instance.\n\n    This function implements lazy loading and singleton pattern\n    for the AgentManager and its dependencies.\n    \"\"\"\n    global _agent_manager, _game_factory, _game_components\n\n    if not _agent_manager:\n        # Create new instance with dependencies\n        if not _game_factory:\n            _game_factory = GameFactory()\n\n        if not _game_components:\n            _game_components = _game_factory.create_game_components()\n\n        agents, managers = _game_components\n\n        _agent_manager = AgentManager(\n            agents=agents,\n            managers=managers,\n            game_factory=_game_factory,\n            story_graph_config=_game_factory._config.agent_configs.story_graph_config\n        )\n\n    return _agent_manager\n</code></pre>"},{"location":"content/architecture/models/dependencies/#protocol-definitions","title":"Protocol Definitions","text":""},{"location":"content/architecture/models/dependencies/#base-protocols","title":"Base Protocols","text":"Agent ProtocolManager Protocol <pre><code>class BaseAgentProtocol(Protocol):\n    \"\"\"Base protocol for all agents.\"\"\"\n\n    async def initialize(self) -&gt; None: ...\n    async def process(self, state: StateType) -&gt; StateType: ...\n    async def shutdown(self) -&gt; None: ...\n</code></pre> <pre><code>class ManagerProtocol(Protocol):\n    \"\"\"Base protocol for all managers.\"\"\"\n\n    async def initialize(self) -&gt; None: ...\n    async def process(self, context: Any) -&gt; Any: ...\n    async def shutdown(self) -&gt; None: ...\n</code></pre>"},{"location":"content/architecture/models/dependencies/#specialized-protocols","title":"Specialized Protocols","text":"State ManagerCache Manager <pre><code>class StateManagerProtocol(Protocol):\n    \"\"\"Protocol for state management.\"\"\"\n\n    async def get_state(self) -&gt; GameState: ...\n    async def update_state(self, update: StateUpdate) -&gt; None: ...\n    async def validate_state(self, state: GameState) -&gt; bool: ...\n</code></pre> <pre><code>class CacheManagerProtocol(Protocol):\n    \"\"\"Protocol for cache management.\"\"\"\n\n    async def get(self, key: str) -&gt; Any: ...\n    async def set(self, key: str, value: Any) -&gt; None: ...\n    async def invalidate(self, key: str) -&gt; None: ...\n</code></pre>"},{"location":"content/architecture/models/dependencies/#dependency-flow","title":"Dependency Flow","text":"<pre><code>sequenceDiagram\n    participant API as FastAPI\n    participant DI as Dependency Injection\n    participant GF as Game Factory\n    participant CM as Components\n\n    API-&gt;&gt;DI: Request Component\n    DI-&gt;&gt;GF: Get/Create Factory\n    GF-&gt;&gt;CM: Create Components\n    CM--&gt;&gt;GF: Return Components\n    GF--&gt;&gt;DI: Return Instance\n    DI--&gt;&gt;API: Provide Component</code></pre>"},{"location":"content/architecture/models/dependencies/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Protocol Design</p> <ul> <li>Clear interfaces</li> <li>Single responsibility</li> <li>Version compatibility</li> <li>Error handling</li> </ul> </li> <li> <p>Dependency Management</p> <ul> <li>Lazy loading</li> <li>Proper injection</li> <li>Lifecycle handling</li> <li>Resource cleanup</li> </ul> </li> <li> <p>Component Resolution</p> <ul> <li>Efficient resolution</li> <li>Proper caching</li> <li>Circular detection</li> <li>Error management</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Clean interfaces</li> <li>Type safety</li> <li>Resource management</li> <li>Performance optimization</li> </ul> </li> </ol>"},{"location":"content/architecture/models/dependencies/#integration-examples","title":"Integration Examples","text":""},{"location":"content/architecture/models/dependencies/#with-fastapi","title":"With FastAPI","text":"<pre><code>from fastapi import Depends\n\nasync def get_agent_manager(\n    manager: AgentManagerProtocol = Depends(get_agent_manager)\n) -&gt; AgentManagerProtocol:\n    \"\"\"Dependency injection for FastAPI.\"\"\"\n    return manager\n</code></pre>"},{"location":"content/architecture/models/dependencies/#with-managers","title":"With Managers","text":"<pre><code>class GameManager:\n    \"\"\"Example of manager with dependencies.\"\"\"\n\n    def __init__(\n        self,\n        state_manager: StateManagerProtocol,\n        cache_manager: CacheManagerProtocol\n    ):\n        self.state_manager = state_manager\n        self.cache_manager = cache_manager\n</code></pre>"},{"location":"content/architecture/models/dependencies/#with-agents","title":"With Agents","text":"<pre><code>class GameAgent:\n    \"\"\"Example of agent with dependencies.\"\"\"\n\n    def __init__(\n        self,\n        rules_manager: RulesManagerProtocol,\n        decision_manager: DecisionManagerProtocol\n    ):\n        self.rules_manager = rules_manager\n        self.decision_manager = decision_manager\n</code></pre>"},{"location":"content/architecture/models/factories/","title":"Factory System","text":"<p>Overview</p> <p>The factory system in CASYS RPG is responsible for creating and configuring game components, models, and their dependencies. It uses two main factories: GameFactory and ModelFactory.</p>"},{"location":"content/architecture/models/factories/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph Factory System\n        GF[Game Factory] --&gt; CM[Component Creation]\n        GF --&gt; DI[Dependency Injection]\n        GF --&gt; VA[Validation]\n\n        MF[Model Factory] --&gt; MC[Model Creation]\n        MF --&gt; BL[Business Logic]\n        MF --&gt; IN[Initialization]\n    end\n\n    subgraph Components\n        CM --&gt; AG[Agents]\n        CM --&gt; MN[Managers]\n        CM --&gt; SG[Story Graph]\n\n        MC --&gt; GM[Game Models]\n        MC --&gt; DM[Domain Models]\n    end</code></pre>"},{"location":"content/architecture/models/factories/#game-factory","title":"Game Factory","text":"<p>The GameFactory is responsible for creating and configuring all game components.</p>"},{"location":"content/architecture/models/factories/#component-creation","title":"Component Creation","text":"<pre><code>class GameFactory:\n    \"\"\"Factory for creating game components.\"\"\"\n\n    async def create_game_components(self) -&gt; tuple[\n        Dict[str, AgentProtocols],\n        Dict[str, ManagerProtocols]\n    ]:\n        \"\"\"Create all game components.\n\n        Returns:\n            tuple: (agents, managers)\n\n        Raises:\n            Exception: If component creation fails\n        \"\"\"\n        try:\n            # Create managers first\n            managers = await self._create_managers()\n\n            # Create agents with manager dependencies\n            agents = await self._create_agents(managers)\n\n            # Validate components\n            self._validate_managers(managers)\n            self._validate_agents(agents)\n\n            return agents, managers\n\n        except Exception as e:\n            logger.error(f\"Failed to create game components: {e}\")\n            raise\n</code></pre>"},{"location":"content/architecture/models/factories/#manager-creation","title":"Manager Creation","text":"<pre><code># Type alias for manager protocols\nManagerProtocols = Union[\n    WorkflowManagerProtocol,\n    StateManagerProtocol,\n    CacheManagerProtocol,\n    CharacterManagerProtocol,\n    TraceManagerProtocol,\n    RulesManagerProtocol,\n    DecisionManagerProtocol,\n    NarratorManagerProtocol\n]\n\nasync def _create_managers(self) -&gt; Dict[str, ManagerProtocols]:\n    \"\"\"Create all game managers.\"\"\"\n    managers = {\n        \"state\": StateManager(self._config),\n        \"cache\": self._cache_manager,\n        \"character\": CharacterManager(),\n        \"trace\": TraceManager(),\n        \"rules\": RulesManager(),\n        \"decision\": DecisionManager(),\n        \"narrator\": NarratorManager()\n    }\n    return managers\n</code></pre>"},{"location":"content/architecture/models/factories/#story-graph-creation","title":"Story Graph Creation","text":"<pre><code>async def create_story_graph(\n    self,\n    config: AgentConfigBase,\n    managers: Dict[str, ManagerProtocols],\n    agents: Dict[str, AgentProtocols]\n) -&gt; StoryGraphProtocol:\n    \"\"\"Create and configure story graph.\n\n    Args:\n        config: Configuration for story graph\n        managers: Container with all managers\n        agents: Container with all agents\n\n    Returns:\n        StoryGraphProtocol: Configured story graph\n    \"\"\"\n</code></pre>"},{"location":"content/architecture/models/factories/#model-factory","title":"Model Factory","text":"<p>The ModelFactory handles the creation of game models with proper business logic validation.</p>"},{"location":"content/architecture/models/factories/#game-state-creation","title":"Game State Creation","text":"<pre><code>class ModelFactory:\n    \"\"\"Factory for creating business models.\"\"\"\n\n    @staticmethod\n    def create_game_state(\n        game_id: Optional[str] = None,\n        session_id: Optional[str] = None,\n        section_number: Optional[int] = None,\n        narrative: Optional[NarratorModel] = None,\n        rules: Optional[RulesModel] = None,\n        decision: Optional[DecisionModel] = None,\n        trace: Optional[TraceModel] = None,\n        **kwargs: Dict[str, Any]\n    ) -&gt; GameState:\n        \"\"\"Create an empty GameState.\n\n        This method creates a GameState with provided values or None.\n        ID generation is handled by StateManager.\n        \"\"\"\n</code></pre>"},{"location":"content/architecture/models/factories/#model-initialization","title":"Model Initialization","text":"<pre><code>class ModelFactory:\n    \"\"\"Model initialization methods.\"\"\"\n\n    @staticmethod\n    def create_character(\n        name: str,\n        stats: CharacterStats,\n        **kwargs: Dict[str, Any]\n    ) -&gt; CharacterModel:\n        \"\"\"Create a character model with initial stats.\"\"\"\n        return CharacterModel(\n            id=uuid.uuid4(),\n            name=name,\n            stats=stats,\n            **kwargs\n        )\n</code></pre>"},{"location":"content/architecture/models/factories/#factory-integration","title":"Factory Integration","text":""},{"location":"content/architecture/models/factories/#component-dependencies","title":"Component Dependencies","text":"<pre><code>sequenceDiagram\n    participant GF as GameFactory\n    participant MF as ModelFactory\n    participant CM as Components\n\n    GF-&gt;&gt;MF: Create Models\n    MF--&gt;&gt;GF: Return Models\n    GF-&gt;&gt;CM: Create Components\n    CM--&gt;&gt;GF: Return Components\n    GF-&gt;&gt;CM: Configure Dependencies</code></pre>"},{"location":"content/architecture/models/factories/#validation-flow","title":"Validation Flow","text":"<pre><code>sequenceDiagram\n    participant F as Factory\n    participant V as Validator\n    participant C as Component\n\n    F-&gt;&gt;C: Create Component\n    F-&gt;&gt;V: Validate Component\n    V--&gt;&gt;F: Validation Result\n    F-&gt;&gt;C: Configure Component</code></pre>"},{"location":"content/architecture/models/factories/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Component Creation</p> <ul> <li>Clear dependencies</li> <li>Proper validation</li> <li>Error handling</li> <li>Resource management</li> </ul> </li> <li> <p>Model Creation</p> <ul> <li>Business logic validation</li> <li>Default values</li> <li>Type safety</li> <li>Error handling</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Clean interfaces</li> <li>Dependency injection</li> <li>Component lifecycle</li> <li>Error propagation</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Efficient creation</li> <li>Resource pooling</li> <li>Caching strategy</li> <li>Memory management</li> </ul> </li> </ol>"},{"location":"content/architecture/models/game-state/","title":"Game State","text":"<p>Overview</p> <p>The Game State is the central data structure that maintains the entire game's state. It uses an immutable design pattern with Pydantic v2 for validation and serialization.</p>"},{"location":"content/architecture/models/game-state/#core-architecture","title":"Core Architecture","text":"<pre><code>graph TD\n    subgraph GameState\n        GS[GameState] --&gt; MS[Metadata State]\n        GS --&gt; CS[Character State]\n        GS --&gt; RS[Rules State]\n        GS --&gt; DS[Decision State]\n        GS --&gt; NS[Narrative State]\n        GS --&gt; TS[Trace State]\n    end\n\n    subgraph Components\n        MS --&gt; MT[Metadata]\n        CS --&gt; CH[Character]\n        RS --&gt; RL[Rules]\n        DS --&gt; DC[Decisions]\n        NS --&gt; NR[Narrative]\n        TS --&gt; TR[Traces]\n    end\n\n    GS --&gt; |Validates| VA[Validation]\n    GS --&gt; |Updates| HI[History]</code></pre>"},{"location":"content/architecture/models/game-state/#state-structure","title":"State Structure","text":"<pre><code>class GameState(BaseModel):\n    \"\"\"Core game state model.\"\"\"\n\n    # Metadata\n    id: UUID\n    version: int\n    timestamp: datetime\n\n    # Game components\n    character: CharacterModel\n    rules: RulesModel\n    decisions: DecisionModel\n    narrative: NarratorModel\n    trace: TraceModel\n\n    # State management\n    metadata: MetadataModel\n    history: List[StateChange]\n</code></pre>"},{"location":"content/architecture/models/game-state/#state-components","title":"State Components","text":""},{"location":"content/architecture/models/game-state/#character-state","title":"Character State","text":"<ul> <li> <p>Attributes</p> <ul> <li>Base stats</li> <li>Skills</li> <li>Inventory</li> <li>Status effects</li> </ul> </li> <li> <p>Validation</p> <ul> <li>Attribute ranges</li> <li>Skill requirements</li> <li>Inventory limits</li> <li>Status conflicts</li> </ul> </li> </ul>"},{"location":"content/architecture/models/game-state/#rules-state","title":"Rules State","text":"<ul> <li> <p>Components</p> <ul> <li>Active rules</li> <li>Constraints</li> <li>Mechanics</li> <li>Conditions</li> </ul> </li> <li> <p>Validation</p> <ul> <li>Rule consistency</li> <li>Constraint checking</li> <li>Action validation</li> <li>State transitions</li> </ul> </li> </ul>"},{"location":"content/architecture/models/game-state/#decision-state","title":"Decision State","text":"<ul> <li> <p>Elements</p> <ul> <li>Current choices</li> <li>Decision history</li> <li>Outcomes</li> <li>Conditions</li> </ul> </li> <li> <p>Processing</p> <ul> <li>Choice validation</li> <li>Outcome determination</li> <li>State updates</li> <li>History tracking</li> </ul> </li> </ul>"},{"location":"content/architecture/models/game-state/#narrative-state","title":"Narrative State","text":"<ul> <li> <p>Content</p> <ul> <li>Current scene</li> <li>Dialog history</li> <li>Story context</li> <li>Style settings</li> </ul> </li> <li> <p>Management</p> <ul> <li>Content generation</li> <li>Context tracking</li> <li>Style control</li> <li>Flow management</li> </ul> </li> </ul>"},{"location":"content/architecture/models/game-state/#trace-state","title":"Trace State","text":"<ul> <li> <p>Data</p> <ul> <li>Event log</li> <li>State changes</li> <li>Analytics</li> <li>Debug info</li> </ul> </li> <li> <p>Processing</p> <ul> <li>Event tracking</li> <li>Analysis</li> <li>Performance monitoring</li> <li>Error logging</li> </ul> </li> </ul>"},{"location":"content/architecture/models/game-state/#state-management","title":"State Management","text":""},{"location":"content/architecture/models/game-state/#state-updates","title":"State Updates","text":"<pre><code>class StateManager:\n    async def update_state(\n        self,\n        current_state: GameState,\n        update: StateUpdate\n    ) -&gt; GameState:\n        # Validate update\n        if not await self._validate_update(update):\n            raise StateValidationError(\"Invalid state update\")\n\n        # Create new state\n        new_state = await self._create_new_state(\n            current_state,\n            update\n        )\n\n        # Add to history\n        new_state.history.append(StateChange(\n            timestamp=datetime.utcnow(),\n            change_type=update.type,\n            details=update.details\n        ))\n\n        return new_state\n</code></pre>"},{"location":"content/architecture/models/game-state/#state-validation","title":"State Validation","text":"<pre><code>class GameState(BaseModel):\n    \"\"\"Validation methods for game state.\"\"\"\n\n    @validator(\"character\")\n    def validate_character(cls, v):\n        \"\"\"Validate character state.\"\"\"\n        if not v.is_valid():\n            raise ValueError(\"Invalid character state\")\n        return v\n\n    @validator(\"rules\")\n    def validate_rules(cls, v):\n        \"\"\"Validate rules state.\"\"\"\n        if not v.check_consistency():\n            raise ValueError(\"Inconsistent rules state\")\n        return v\n</code></pre>"},{"location":"content/architecture/models/game-state/#state-history","title":"State History","text":"<p>The state maintains a complete history of changes:</p> <pre><code>class StateChange(BaseModel):\n    \"\"\"Record of state changes.\"\"\"\n\n    timestamp: datetime\n    change_type: StateChangeType\n    details: Dict[str, Any]\n    previous_state: Optional[UUID]\n    metadata: Dict[str, Any]\n</code></pre>"},{"location":"content/architecture/models/game-state/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Immutability</p> <ul> <li>Never modify state directly</li> <li>Create new state for changes</li> <li>Maintain change history</li> <li>Use proper validation</li> </ul> </li> <li> <p>Validation</p> <ul> <li>Validate all updates</li> <li>Check constraints</li> <li>Maintain consistency</li> <li>Handle edge cases</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Optimize state size</li> <li>Use efficient serialization</li> <li>Cache when appropriate</li> <li>Monitor memory usage</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Clear error messages</li> <li>State recovery</li> <li>Validation feedback</li> <li>Debug information</li> </ul> </li> </ol>"},{"location":"content/architecture/models/game-state/#integration","title":"Integration","text":""},{"location":"content/architecture/models/game-state/#with-managers","title":"With Managers","text":"<ul> <li>State updates through managers</li> <li>Validation coordination</li> <li>History tracking</li> <li>Cache management</li> </ul>"},{"location":"content/architecture/models/game-state/#with-agents","title":"With Agents","text":"<ul> <li>State observation</li> <li>Event processing</li> <li>Decision making</li> <li>Content generation</li> </ul>"},{"location":"content/architecture/models/game-state/#with-api","title":"With API","text":"<ul> <li>State serialization</li> <li>Update handling</li> <li>WebSocket sync</li> <li>Error responses</li> </ul>"},{"location":"content/architecture/models/types/","title":"Type System &amp; Dependencies","text":"<p>Overview</p> <p>CASYS RPG uses a comprehensive type system with protocols and dependency injection to ensure type safety and maintainable code structure.</p>"},{"location":"content/architecture/models/types/#type-architecture","title":"Type Architecture","text":"<pre><code>graph TD\n    subgraph Type System\n        TP[Types] --&gt; AT[Agent Types]\n        TP --&gt; MT[Manager Types]\n        TP --&gt; CT[Common Types]\n    end\n\n    subgraph Protocols\n        PR[Protocols] --&gt; AP[Agent Protocols]\n        PR --&gt; MP[Manager Protocols]\n        PR --&gt; CP[Common Protocols]\n    end\n\n    subgraph Dependencies\n        DI[Dependency Injection] --&gt; SR[Service Registry]\n        DI --&gt; LC[Lifecycle]\n        DI --&gt; SC[Scopes]\n    end\n\n    TP --&gt; PR\n    PR --&gt; DI</code></pre>"},{"location":"content/architecture/models/types/#agent-types","title":"Agent Types","text":""},{"location":"content/architecture/models/types/#base-types","title":"Base Types","text":"<pre><code>from typing import Protocol, TypeVar, Union\n\n# Type variables\nAgentType = TypeVar('AgentType', bound='BaseAgent')\nStateType = TypeVar('StateType', bound='GameState')\n\n# Agent protocols\nclass BaseAgentProtocol(Protocol):\n    \"\"\"Base protocol for all agents.\"\"\"\n\n    async def initialize(self) -&gt; None: ...\n    async def process(self, state: StateType) -&gt; StateType: ...\n    async def shutdown(self) -&gt; None: ...\n</code></pre>"},{"location":"content/architecture/models/types/#specialized-agents","title":"Specialized Agents","text":"<pre><code># Agent type unions\nAgentTypes = Union[\n    StoryGraphProtocol,\n    RulesAgentProtocol,\n    DecisionAgentProtocol,\n    NarratorAgentProtocol,\n    TraceAgentProtocol\n]\n\n# Agent configurations\nclass AgentConfig(BaseModel):\n    \"\"\"Configuration for agents.\"\"\"\n\n    name: str\n    type: AgentTypes\n    config: Dict[str, Any]\n    dependencies: List[str]\n</code></pre>"},{"location":"content/architecture/models/types/#manager-types","title":"Manager Types","text":""},{"location":"content/architecture/models/types/#core-managers","title":"Core Managers","text":"<pre><code># Manager protocols\nclass ManagerProtocol(Protocol):\n    \"\"\"Base protocol for all managers.\"\"\"\n\n    async def initialize(self) -&gt; None: ...\n    async def process(self, context: Any) -&gt; Any: ...\n    async def shutdown(self) -&gt; None: ...\n\n# Manager types\nManagerTypes = Union[\n    StateManagerProtocol,\n    CacheManagerProtocol,\n    WorkflowManagerProtocol,\n    RulesManagerProtocol,\n    DecisionManagerProtocol,\n    NarratorManagerProtocol,\n    CharacterManagerProtocol,\n    TraceManagerProtocol\n]\n</code></pre>"},{"location":"content/architecture/models/types/#manager-configuration","title":"Manager Configuration","text":"<pre><code>class ManagerConfig(BaseModel):\n    \"\"\"Configuration for managers.\"\"\"\n\n    name: str\n    type: ManagerTypes\n    config: Dict[str, Any]\n    dependencies: List[str]\n</code></pre>"},{"location":"content/architecture/models/types/#common-types","title":"Common Types","text":""},{"location":"content/architecture/models/types/#utility-types","title":"Utility Types","text":"<pre><code># Generic types\nT = TypeVar('T')\nContext = TypeVar('Context')\nResult = TypeVar('Result')\n\n# Common type aliases\nJSON = Dict[str, Any]\nPath = str\nTimestamp = float\n</code></pre>"},{"location":"content/architecture/models/types/#state-types","title":"State Types","text":"<pre><code># State related types\nclass StateTypes:\n    \"\"\"Type definitions for state management.\"\"\"\n\n    StateUpdate = Dict[str, Any]\n    StateChange = Tuple[str, Any]\n    StateVersion = int\n    StateMetadata = Dict[str, Any]\n</code></pre>"},{"location":"content/architecture/models/types/#dependency-system","title":"Dependency System","text":""},{"location":"content/architecture/models/types/#service-registration","title":"Service Registration","text":"<pre><code>class ServiceRegistry:\n    \"\"\"Manages service registration and resolution.\"\"\"\n\n    _services: Dict[str, Any] = {}\n    _factories: Dict[str, Callable] = {}\n\n    @classmethod\n    def register(cls, name: str, service: Any) -&gt; None:\n        \"\"\"Register a service.\"\"\"\n        cls._services[name] = service\n\n    @classmethod\n    def resolve(cls, name: str) -&gt; Any:\n        \"\"\"Resolve a service.\"\"\"\n        return cls._services.get(name)\n</code></pre>"},{"location":"content/architecture/models/types/#dependency-resolution","title":"Dependency Resolution","text":"<pre><code>class DependencyResolver:\n    \"\"\"Resolves dependencies for components.\"\"\"\n\n    async def resolve_dependencies(\n        self,\n        component: Any,\n        config: Dict[str, Any]\n    ) -&gt; None:\n        \"\"\"Resolve and inject dependencies.\"\"\"\n\n        for dep_name in config.get('dependencies', []):\n            # Get dependency\n            dependency = await self._get_dependency(dep_name)\n\n            # Inject dependency\n            setattr(component, dep_name, dependency)\n</code></pre>"},{"location":"content/architecture/models/types/#lifecycle-management","title":"Lifecycle Management","text":"<pre><code>class ComponentLifecycle:\n    \"\"\"Manages component lifecycle.\"\"\"\n\n    async def initialize_component(\n        self,\n        component: Any,\n        config: Dict[str, Any]\n    ) -&gt; None:\n        \"\"\"Initialize a component with dependencies.\"\"\"\n\n        # Resolve dependencies\n        await self.resolver.resolve_dependencies(\n            component,\n            config\n        )\n\n        # Initialize component\n        if hasattr(component, 'initialize'):\n            await component.initialize()\n</code></pre>"},{"location":"content/architecture/models/types/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Type Safety</p> <ul> <li>Use strict typing</li> <li>Define clear protocols</li> <li>Implement proper validation</li> <li>Handle type conversions</li> </ul> </li> <li> <p>Protocol Design</p> <ul> <li>Single responsibility</li> <li>Clear interfaces</li> <li>Proper abstraction</li> <li>Version compatibility</li> </ul> </li> <li> <p>Dependency Management</p> <ul> <li>Clear dependencies</li> <li>Proper injection</li> <li>Lifecycle handling</li> <li>Error management</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Efficient resolution</li> <li>Proper caching</li> <li>Resource management</li> <li>Memory optimization</li> </ul> </li> </ol>"},{"location":"content/architecture/models/types/#integration","title":"Integration","text":""},{"location":"content/architecture/models/types/#with-models","title":"With Models","text":"<ul> <li>Type validation</li> <li>Model conversion</li> <li>State management</li> <li>Error handling</li> </ul>"},{"location":"content/architecture/models/types/#with-agents","title":"With Agents","text":"<ul> <li>Protocol implementation</li> <li>Type checking</li> <li>Dependency injection</li> <li>State handling</li> </ul>"},{"location":"content/architecture/models/types/#with-managers","title":"With Managers","text":"<ul> <li>Service resolution</li> <li>Resource management</li> <li>State coordination</li> <li>Error propagation</li> </ul>"},{"location":"content/guides/advanced/","title":"Advanced Features","text":"<p>Overview</p> <p>Explore advanced features and capabilities of CASYS RPG for power users and developers who want to extend the system.</p>"},{"location":"content/guides/advanced/#advanced-topics","title":"Advanced Topics","text":"AI IntegrationState ManagementCustom Agents <ul> <li> <p>Custom Language Models</p> <ul> <li>Model configuration</li> <li>Prompt engineering</li> <li>Response optimization</li> </ul> </li> <li> <p>Agent Customization</p> <ul> <li>Custom behaviors</li> <li>Specialized processing</li> <li>Advanced integration</li> </ul> </li> <li> <p>Learn More</p> </li> </ul> <ul> <li> <p>Complex States</p> <ul> <li>State composition</li> <li>State validation</li> <li>State transitions</li> </ul> </li> <li> <p>State Patterns</p> <ul> <li>Immutable states</li> <li>State machines</li> <li>Event sourcing</li> </ul> </li> <li> <p>Learn More</p> </li> </ul> <ul> <li> <p>Agent Development</p> <ul> <li>Agent architecture</li> <li>Communication</li> <li>Integration</li> </ul> </li> <li> <p>Specialized Agents</p> <ul> <li>Custom behaviors</li> <li>New capabilities</li> <li>System integration</li> </ul> </li> <li> <p>Learn More</p> </li> </ul>"},{"location":"content/guides/advanced/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"content/guides/advanced/#complex-game-mechanics","title":"Complex Game Mechanics","text":"<pre><code>graph TD\n    subgraph Game Logic\n        SM[State Machine] --&gt; EV[Events]\n        EV --&gt; RU[Rules]\n        RU --&gt; AC[Actions]\n    end\n\n    subgraph Processing\n        AI[AI Processing]\n        VA[Validation]\n        TR[Transitions]\n    end\n\n    Game Logic --&gt; Processing</code></pre> <ul> <li> <p>State Machines</p> <ul> <li>Complex transitions</li> <li>Validation rules</li> <li>Event handling</li> </ul> </li> <li> <p>Custom Rules</p> <ul> <li>Rule definition</li> <li>Rule processing</li> <li>Rule chaining</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/#advanced-ai-features","title":"Advanced AI Features","text":"<ul> <li> <p>Custom Models</p> <ul> <li>Model selection</li> <li>Parameter tuning</li> <li>Performance optimization</li> </ul> </li> <li> <p>Complex Processing</p> <ul> <li>Multi-step processing</li> <li>Context management</li> <li>Response generation</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/#system-integration","title":"System Integration","text":"<pre><code>graph LR\n    subgraph External\n        API[External API]\n        DB[Database]\n        SV[Services]\n    end\n\n    subgraph Internal\n        AG[Agents]\n        PR[Processing]\n        ST[State]\n    end\n\n    External --&gt; Internal</code></pre> <ul> <li> <p>API Integration</p> <ul> <li>Custom endpoints</li> <li>Data transformation</li> <li>Error handling</li> </ul> </li> <li> <p>Service Integration</p> <ul> <li>External services</li> <li>Data synchronization</li> <li>State management</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/#performance-optimization","title":"Performance Optimization","text":""},{"location":"content/guides/advanced/#caching-strategies","title":"Caching Strategies","text":"<ul> <li> <p>State Caching</p> <ul> <li>Cache levels</li> <li>Invalidation</li> <li>Synchronization</li> </ul> </li> <li> <p>Response Caching</p> <ul> <li>Cache policies</li> <li>Cache management</li> <li>Performance tuning</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/#async-processing","title":"Async Processing","text":"<ul> <li> <p>Parallel Processing</p> <ul> <li>Task distribution</li> <li>Resource management</li> <li>Synchronization</li> </ul> </li> <li> <p>Event Processing</p> <ul> <li>Event queues</li> <li>Processing strategies</li> <li>Error handling</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/#security-considerations","title":"Security Considerations","text":""},{"location":"content/guides/advanced/#authentication","title":"Authentication","text":"<ul> <li> <p>Custom Auth</p> <ul> <li>Auth providers</li> <li>Token management</li> <li>Session handling</li> </ul> </li> <li> <p>Authorization</p> <ul> <li>Permission models</li> <li>Access control</li> <li>Role management</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/#data-protection","title":"Data Protection","text":"<ul> <li> <p>Encryption</p> <ul> <li>Data encryption</li> <li>Key management</li> <li>Secure storage</li> </ul> </li> <li> <p>Validation</p> <ul> <li>Input validation</li> <li>Output sanitization</li> <li>Security checks</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/#next-steps","title":"Next Steps","text":"<ul> <li>Explore AI Integration</li> <li>Learn about State Management</li> <li>Create Custom Agents</li> <li>Review Technical Documentation</li> </ul>"},{"location":"content/guides/advanced/ai-integration/","title":"AI Integration","text":"<p>Overview</p> <p>Deep dive into AI integration capabilities of CASYS RPG, including custom models, advanced processing, and optimization techniques.</p>"},{"location":"content/guides/advanced/ai-integration/#language-models","title":"Language Models","text":""},{"location":"content/guides/advanced/ai-integration/#model-configuration","title":"Model Configuration","text":"<pre><code>class ModelConfig:\n    \"\"\"Language model configuration.\"\"\"\n    model_name: str = \"gpt-4o-mini\"\n    temperature: float = 0.7\n    max_tokens: int = 2048\n    stop_sequences: List[str] = []\n\n    class Prompts:\n        system: str = \"You are a game master...\"\n        context: str = \"Current game state...\"\n        format: str = \"Response format...\"\n</code></pre> <ul> <li> <p>Model Selection</p> <ul> <li>Model capabilities</li> <li>Performance characteristics</li> <li>Resource requirements</li> </ul> </li> <li> <p>Parameter Tuning</p> <ul> <li>Temperature</li> <li>Token limits</li> <li>Response formatting</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/ai-integration/#prompt-engineering","title":"Prompt Engineering","text":"<pre><code>%%{init: {'theme': 'default', 'themeVariables': { 'fontFamily': 'Roboto' }}}%%\nflowchart TD\n    subgraph PC[Prompt Components]\n        SY[System Prompt]\n        CO[Context]\n        HI[History]\n        FO[Format]\n    end\n\n    subgraph PR[Processing]\n        TO[Tokenization]\n        OP[Optimization]\n        VA[Validation]\n    end\n\n    PC --&gt; TO\n    PC --&gt; OP\n    PC --&gt; VA\n\n    style PC fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style PR fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style SY fill:#6200ea,stroke:#6200ea,color:#fff\n    style CO fill:#6200ea,stroke:#6200ea,color:#fff\n    style HI fill:#6200ea,stroke:#6200ea,color:#fff\n    style FO fill:#6200ea,stroke:#6200ea,color:#fff\n    style TO fill:#6200ea,stroke:#6200ea,color:#fff\n    style OP fill:#6200ea,stroke:#6200ea,color:#fff\n    style VA fill:#6200ea,stroke:#6200ea,color:#fff</code></pre> <ul> <li> <p>Prompt Structure</p> <ul> <li>System prompts</li> <li>Context injection</li> <li>Response formatting</li> </ul> </li> <li> <p>Optimization</p> <ul> <li>Token efficiency</li> <li>Context management</li> <li>Response quality</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/ai-integration/#advanced-processing","title":"Advanced Processing","text":""},{"location":"content/guides/advanced/ai-integration/#context-management","title":"Context Management","text":"<pre><code>class ContextManager:\n    \"\"\"Manages AI context and history.\"\"\"\n    def __init__(self, max_tokens: int = 4096):\n        self.history: List[Message] = []\n        self.max_tokens = max_tokens\n\n    def add_message(self, message: Message):\n        \"\"\"Add message while managing context window.\"\"\"\n        while self.total_tokens &gt; self.max_tokens:\n            self.history.pop(0)\n        self.history.append(message)\n</code></pre> <ul> <li> <p>Context Window</p> <ul> <li>Size management</li> <li>History pruning</li> <li>Relevance scoring</li> </ul> </li> <li> <p>Memory Management</p> <ul> <li>Short-term memory</li> <li>Long-term storage</li> <li>Context retrieval</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/ai-integration/#response-generation","title":"Response Generation","text":"<pre><code>%%{init: {'theme': 'default', 'themeVariables': { 'fontFamily': 'Roboto' }}}%%\nflowchart LR\n    subgraph IN[Input]\n        PR[Prompt]\n        CO[Context]\n    end\n\n    subgraph PR[Processing]\n        TO[Token Processing]\n        GE[Generation]\n    end\n\n    subgraph OUT[Output]\n        RE[Response]\n        ME[Metadata]\n    end\n\n    IN --&gt; TO\n    TO --&gt; GE\n    GE --&gt; OUT\n\n    style IN fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style PR fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style OUT fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style PR fill:#6200ea,stroke:#6200ea,color:#fff\n    style CO fill:#6200ea,stroke:#6200ea,color:#fff\n    style TO fill:#6200ea,stroke:#6200ea,color:#fff\n    style GE fill:#6200ea,stroke:#6200ea,color:#fff\n    style RE fill:#6200ea,stroke:#6200ea,color:#fff\n    style ME fill:#6200ea,stroke:#6200ea,color:#fff</code></pre> <ul> <li> <p>Generation Pipeline</p> <ul> <li>Input processing</li> <li>Response generation</li> <li>Output formatting</li> </ul> </li> <li> <p>Quality Control</p> <ul> <li>Response validation</li> <li>Format checking</li> <li>Error handling</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/ai-integration/#custom-agents","title":"Custom Agents","text":""},{"location":"content/guides/advanced/ai-integration/#agent-configuration","title":"Agent Configuration","text":"<pre><code>class AgentConfig:\n    \"\"\"AI agent configuration.\"\"\"\n    name: str\n    role: str\n    capabilities: List[str]\n    model_config: ModelConfig\n    prompt_templates: Dict[str, str]\n\n    def get_prompt(self, context: Dict) -&gt; str:\n        \"\"\"Generate contextualized prompt.\"\"\"\n        template = self.prompt_templates[context[\"type\"]]\n        return template.format(**context)\n</code></pre> <ul> <li> <p>Agent Types</p> <ul> <li>Specialized roles</li> <li>Custom behaviors</li> <li>Integration points</li> </ul> </li> <li> <p>Configuration</p> <ul> <li>Model settings</li> <li>Prompt templates</li> <li>Processing rules</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/ai-integration/#integration-points","title":"Integration Points","text":"<pre><code>%%{init: {'theme': 'default', 'themeVariables': { 'fontFamily': 'Roboto' }}}%%\nflowchart TD\n    subgraph AG[Agents]\n        SA[Story Agent]\n        RA[Rules Agent]\n        DA[Decision Agent]\n        NA[Narrator Agent]\n    end\n\n    subgraph AI[AI Integration]\n        PR[Prompt Engine]\n        LL[LLM Interface]\n        CA[Cache]\n    end\n\n    AG &lt;--&gt; PR\n    PR &lt;--&gt; LL\n    LL &lt;--&gt; CA\n\n    style AG fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style AI fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style SA fill:#6200ea,stroke:#6200ea,color:#fff\n    style RA fill:#6200ea,stroke:#6200ea,color:#fff\n    style DA fill:#6200ea,stroke:#6200ea,color:#fff\n    style NA fill:#6200ea,stroke:#6200ea,color:#fff\n    style PR fill:#6200ea,stroke:#6200ea,color:#fff\n    style LL fill:#6200ea,stroke:#6200ea,color:#fff\n    style CA fill:#6200ea,stroke:#6200ea,color:#fff</code></pre> <ul> <li> <p>Communication</p> <ul> <li>Inter-agent messaging</li> <li>State sharing</li> <li>Event handling</li> </ul> </li> <li> <p>Coordination</p> <ul> <li>Task distribution</li> <li>Resource management</li> <li>Error handling</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/ai-integration/#performance-optimization","title":"Performance Optimization","text":""},{"location":"content/guides/advanced/ai-integration/#caching","title":"Caching","text":"<pre><code>class ResponseCache:\n    \"\"\"Caches AI responses.\"\"\"\n    def __init__(self, capacity: int = 1000):\n        self.cache = LRUCache(capacity)\n\n    def get_response(self, prompt: str) -&gt; Optional[str]:\n        \"\"\"Get cached response if available.\"\"\"\n        key = self.hash_prompt(prompt)\n        return self.cache.get(key)\n</code></pre> <ul> <li> <p>Cache Strategies</p> <ul> <li>Response caching</li> <li>Context caching</li> <li>Cache invalidation</li> </ul> </li> <li> <p>Optimization</p> <ul> <li>Memory usage</li> <li>Response time</li> <li>Resource efficiency</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/ai-integration/#async-processing","title":"Async Processing","text":"<ul> <li> <p>Parallel Processing</p> <ul> <li>Task distribution</li> <li>Resource management</li> <li>Result aggregation</li> </ul> </li> <li> <p>Queue Management</p> <ul> <li>Priority queues</li> <li>Rate limiting</li> <li>Error handling</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/ai-integration/#best-practices","title":"Best Practices","text":""},{"location":"content/guides/advanced/ai-integration/#development","title":"Development","text":"<ol> <li> <p>Code Organization</p> <ul> <li>Clear structure</li> <li>Documentation</li> <li>Testing</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Graceful degradation</li> <li>Error recovery</li> <li>Logging</li> </ul> </li> </ol>"},{"location":"content/guides/advanced/ai-integration/#deployment","title":"Deployment","text":"<ol> <li> <p>Resource Management</p> <ul> <li>CPU usage</li> <li>Memory allocation</li> <li>API quotas</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>Performance metrics</li> <li>Error tracking</li> <li>Usage statistics</li> </ul> </li> </ol>"},{"location":"content/guides/advanced/ai-integration/#next-steps","title":"Next Steps","text":"<ul> <li>Explore State Management</li> <li>Learn about Custom Agents</li> <li>Review Technical Documentation</li> </ul>"},{"location":"content/guides/advanced/custom-agents/","title":"Custom Agents","text":"<p>Overview</p> <p>Learn how to create and integrate custom agents into CASYS RPG's multi-agent system.</p>"},{"location":"content/guides/advanced/custom-agents/#agent-architecture","title":"Agent Architecture","text":""},{"location":"content/guides/advanced/custom-agents/#base-agent","title":"Base Agent","text":"<pre><code>class BaseAgent:\n    \"\"\"Base class for all agents.\"\"\"\n    def __init__(\n        self,\n        name: str,\n        config: AgentConfig,\n        manager: AgentManager\n    ):\n        self.name = name\n        self.config = config\n        self.manager = manager\n\n    async def process(\n        self,\n        context: Dict[str, Any]\n    ) -&gt; AgentResponse:\n        \"\"\"Process agent request.\"\"\"\n        raise NotImplementedError\n</code></pre> <ul> <li> <p>Core Components</p> <ul> <li>Agent identity</li> <li>Configuration</li> <li>Processing logic</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Manager connection</li> <li>Event handling</li> <li>State access</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/custom-agents/#agent-types","title":"Agent Types","text":"<pre><code>graph TD\n    subgraph Base\n        BA[BaseAgent]\n    end\n\n    subgraph Specialized\n        SA[StoryAgent]\n        RA[RulesAgent]\n        DA[DecisionAgent]\n    end\n\n    subgraph Custom\n        CA1[CustomAgent1]\n        CA2[CustomAgent2]\n    end\n\n    Base --&gt; Specialized\n    Base --&gt; Custom</code></pre>"},{"location":"content/guides/advanced/custom-agents/#agent-development","title":"Agent Development","text":""},{"location":"content/guides/advanced/custom-agents/#creating-custom-agents","title":"Creating Custom Agents","text":"<pre><code>class CustomAgent(BaseAgent):\n    \"\"\"Custom agent implementation.\"\"\"\n    def __init__(\n        self,\n        name: str,\n        config: AgentConfig,\n        manager: AgentManager,\n        **kwargs\n    ):\n        super().__init__(name, config, manager)\n        self.custom_config = kwargs.get('custom_config', {})\n\n    async def process(\n        self,\n        context: Dict[str, Any]\n    ) -&gt; AgentResponse:\n        \"\"\"Custom processing logic.\"\"\"\n        # Implement custom logic\n        result = await self._process_custom(context)\n        return AgentResponse(\n            agent=self.name,\n            result=result\n        )\n</code></pre> <ul> <li> <p>Implementation</p> <ul> <li>Core logic</li> <li>State handling</li> <li>Error management</li> </ul> </li> <li> <p>Configuration</p> <ul> <li>Custom settings</li> <li>Processing rules</li> <li>Integration points</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/custom-agents/#agent-communication","title":"Agent Communication","text":"<pre><code>graph LR\n    subgraph Agents\n        A1[Agent 1]\n        A2[Agent 2]\n        A3[Agent 3]\n    end\n\n    subgraph Communication\n        MS[Message System]\n        EV[Event Bus]\n    end\n\n    Agents --&gt; Communication</code></pre> <ul> <li> <p>Message Passing</p> <ul> <li>Direct messages</li> <li>Broadcast events</li> <li>State updates</li> </ul> </li> <li> <p>Coordination</p> <ul> <li>Task distribution</li> <li>Resource sharing</li> <li>Synchronization</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/custom-agents/#integration","title":"Integration","text":""},{"location":"content/guides/advanced/custom-agents/#agent-manager","title":"Agent Manager","text":"<pre><code>class AgentManager:\n    \"\"\"Manages agent lifecycle and communication.\"\"\"\n    def __init__(self):\n        self.agents: Dict[str, BaseAgent] = {}\n        self.event_bus = EventBus()\n\n    def register_agent(\n        self,\n        agent: BaseAgent\n    ):\n        \"\"\"Register new agent.\"\"\"\n        self.agents[agent.name] = agent\n        self.event_bus.subscribe(agent)\n</code></pre> <ul> <li> <p>Management</p> <ul> <li>Agent registration</li> <li>Lifecycle control</li> <li>Resource management</li> </ul> </li> <li> <p>Coordination</p> <ul> <li>Task routing</li> <li>Event distribution</li> <li>State synchronization</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/custom-agents/#event-system","title":"Event System","text":"<pre><code>graph TD\n    subgraph Events\n        GE[Game Events]\n        SE[System Events]\n        CE[Custom Events]\n    end\n\n    subgraph Handlers\n        AH[Agent Handlers]\n        SH[System Handlers]\n        CH[Custom Handlers]\n    end\n\n    Events --&gt; Handlers</code></pre> <ul> <li> <p>Event Types</p> <ul> <li>System events</li> <li>Game events</li> <li>Custom events</li> </ul> </li> <li> <p>Event Handling</p> <ul> <li>Event routing</li> <li>Processing</li> <li>Error handling</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/custom-agents/#advanced-features","title":"Advanced Features","text":""},{"location":"content/guides/advanced/custom-agents/#state-management","title":"State Management","text":"<pre><code>class AgentState:\n    \"\"\"Agent state management.\"\"\"\n    def __init__(self):\n        self.state: Dict[str, Any] = {}\n        self.history: List[Dict] = []\n\n    def update_state(\n        self,\n        updates: Dict[str, Any]\n    ):\n        \"\"\"Update agent state.\"\"\"\n        self.history.append(self.state.copy())\n        self.state.update(updates)\n</code></pre> <ul> <li> <p>State Types</p> <ul> <li>Internal state</li> <li>Shared state</li> <li>History</li> </ul> </li> <li> <p>State Operations</p> <ul> <li>Updates</li> <li>Validation</li> <li>Persistence</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/custom-agents/#processing-pipeline","title":"Processing Pipeline","text":"<pre><code>graph TD\n    subgraph Pipeline\n        IN[Input]\n        PR[Processing]\n        OU[Output]\n    end\n\n    subgraph Steps\n        VA[Validation]\n        TR[Transform]\n        EN[Enrich]\n    end\n\n    Pipeline --&gt; Steps</code></pre> <ul> <li> <p>Pipeline Steps</p> <ul> <li>Input validation</li> <li>Processing</li> <li>Output formatting</li> </ul> </li> <li> <p>Customization</p> <ul> <li>Custom steps</li> <li>Middleware</li> <li>Hooks</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/custom-agents/#best-practices","title":"Best Practices","text":""},{"location":"content/guides/advanced/custom-agents/#development","title":"Development","text":"<ol> <li> <p>Code Organization</p> <ul> <li>Clear structure</li> <li>Documentation</li> <li>Testing</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Graceful degradation</li> <li>Error recovery</li> <li>Logging</li> </ul> </li> </ol>"},{"location":"content/guides/advanced/custom-agents/#deployment","title":"Deployment","text":"<ol> <li> <p>Resource Management</p> <ul> <li>Memory usage</li> <li>CPU utilization</li> <li>Communication overhead</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>Performance metrics</li> <li>Error tracking</li> <li>Usage statistics</li> </ul> </li> </ol>"},{"location":"content/guides/advanced/custom-agents/#next-steps","title":"Next Steps","text":"<ul> <li>Explore AI Integration</li> <li>Learn about State Management</li> <li>Review Technical Documentation</li> </ul>"},{"location":"content/guides/advanced/state-management/","title":"State Management","text":"<p>Overview</p> <p>Advanced state management techniques in CASYS RPG, including state machines, immutable states, and event sourcing.</p>"},{"location":"content/guides/advanced/state-management/#state-architecture","title":"State Architecture","text":""},{"location":"content/guides/advanced/state-management/#state-structure","title":"State Structure","text":"<pre><code>class GameState(BaseModel):\n    \"\"\"Immutable game state.\"\"\"\n    game_id: str\n    player: PlayerState\n    world: WorldState\n    narrative: NarrativeState\n    metadata: Dict[str, Any]\n\n    class Config:\n        frozen = True  # Immutable state\n</code></pre> <ul> <li> <p>State Components</p> <ul> <li>Core state</li> <li>Derived state</li> <li>Metadata</li> </ul> </li> <li> <p>State Validation</p> <ul> <li>Schema validation</li> <li>Business rules</li> <li>State integrity</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/state-management/#state-flow","title":"State Flow","text":"<pre><code>graph TD\n    subgraph States\n        IS[Initial State]\n        CS[Current State]\n        NS[New State]\n    end\n\n    subgraph Events\n        AE[Action Event]\n        SE[System Event]\n        EE[External Event]\n    end\n\n    subgraph Processing\n        VA[Validation]\n        TR[Transition]\n        PE[Persistence]\n    end\n\n    States --&gt; Events\n    Events --&gt; Processing\n    Processing --&gt; States</code></pre>"},{"location":"content/guides/advanced/state-management/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"content/guides/advanced/state-management/#state-machine","title":"State Machine","text":"<pre><code>class GameStateMachine:\n    \"\"\"Game state machine implementation.\"\"\"\n    def __init__(self):\n        self.states: Dict[str, State] = {}\n        self.transitions: Dict[str, List[Transition]] = {}\n\n    def add_transition(\n        self,\n        from_state: str,\n        to_state: str,\n        condition: Callable,\n        action: Callable\n    ):\n        \"\"\"Add state transition.\"\"\"\n        transition = Transition(to_state, condition, action)\n        self.transitions[from_state].append(transition)\n</code></pre> <ul> <li> <p>States</p> <ul> <li>State definition</li> <li>State validation</li> <li>State relationships</li> </ul> </li> <li> <p>Transitions</p> <ul> <li>Transition rules</li> <li>Guards</li> <li>Actions</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/state-management/#event-sourcing","title":"Event Sourcing","text":"<pre><code>graph LR\n    subgraph Events\n        EV[Events]\n        ST[Store]\n        PR[Projection]\n    end\n\n    subgraph State\n        CS[Current State]\n        SN[Snapshots]\n    end\n\n    Events --&gt; State</code></pre> <ul> <li> <p>Event Store</p> <ul> <li>Event persistence</li> <li>Event replay</li> <li>Snapshots</li> </ul> </li> <li> <p>Projections</p> <ul> <li>State rebuilding</li> <li>View models</li> <li>Caching</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/state-management/#state-management_1","title":"State Management","text":""},{"location":"content/guides/advanced/state-management/#immutable-states","title":"Immutable States","text":"<pre><code>@dataclass(frozen=True)\nclass PlayerState:\n    \"\"\"Immutable player state.\"\"\"\n    id: str\n    name: str\n    attributes: FrozenDict[str, int]\n    inventory: FrozenList[Item]\n\n    def with_updates(self, **updates) -&gt; 'PlayerState':\n        \"\"\"Create new state with updates.\"\"\"\n        current = self.__dict__\n        return PlayerState(**{**current, **updates})\n</code></pre> <ul> <li> <p>Benefits</p> <ul> <li>Thread safety</li> <li>Predictability</li> <li>Debugging</li> </ul> </li> <li> <p>Implementation</p> <ul> <li>Immutable classes</li> <li>Copy-on-write</li> <li>State updates</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/state-management/#state-updates","title":"State Updates","text":"<pre><code>graph TD\n    subgraph Update Flow\n        OS[Old State]\n        UP[Update]\n        NS[New State]\n        VA[Validation]\n    end\n\n    subgraph Side Effects\n        EV[Events]\n        NO[Notifications]\n        LO[Logging]\n    end\n\n    Update Flow --&gt; Side Effects</code></pre> <ul> <li> <p>Update Process</p> <ul> <li>State creation</li> <li>Validation</li> <li>Persistence</li> </ul> </li> <li> <p>Side Effects</p> <ul> <li>Event generation</li> <li>Notifications</li> <li>Logging</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/state-management/#performance-optimization","title":"Performance Optimization","text":""},{"location":"content/guides/advanced/state-management/#caching","title":"Caching","text":"<pre><code>class StateCache:\n    \"\"\"State caching system.\"\"\"\n    def __init__(self, capacity: int = 1000):\n        self.cache = LRUCache(capacity)\n        self.snapshots: Dict[str, GameState] = {}\n\n    def get_state(self, state_id: str) -&gt; Optional[GameState]:\n        \"\"\"Get cached state if available.\"\"\"\n        return self.cache.get(state_id)\n</code></pre> <ul> <li> <p>Cache Strategies</p> <ul> <li>Full state</li> <li>Partial state</li> <li>Derived data</li> </ul> </li> <li> <p>Cache Management</p> <ul> <li>Invalidation</li> <li>Synchronization</li> <li>Memory usage</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/state-management/#async-processing","title":"Async Processing","text":"<ul> <li> <p>Parallel Updates</p> <ul> <li>Concurrent processing</li> <li>Resource management</li> <li>Synchronization</li> </ul> </li> <li> <p>Event Processing</p> <ul> <li>Event queues</li> <li>Processing strategies</li> <li>Error handling</li> </ul> </li> </ul>"},{"location":"content/guides/advanced/state-management/#best-practices","title":"Best Practices","text":""},{"location":"content/guides/advanced/state-management/#development","title":"Development","text":"<ol> <li> <p>Code Organization</p> <ul> <li>Clear structure</li> <li>Documentation</li> <li>Testing</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>State validation</li> <li>Error recovery</li> <li>Logging</li> </ul> </li> </ol>"},{"location":"content/guides/advanced/state-management/#deployment","title":"Deployment","text":"<ol> <li> <p>Resource Management</p> <ul> <li>Memory usage</li> <li>CPU utilization</li> <li>Storage optimization</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>State metrics</li> <li>Performance tracking</li> <li>Error monitoring</li> </ul> </li> </ol>"},{"location":"content/guides/advanced/state-management/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Custom Agents</li> <li>Learn about AI Integration</li> <li>Review Technical Documentation</li> </ul>"},{"location":"content/guides/concepts/","title":"Game Concepts","text":"<p>Overview</p> <p>CASYS RPG is a next-generation role-playing game system powered by AI agents. It combines dynamic storytelling with sophisticated game mechanics to create unique and engaging player experiences.</p>"},{"location":"content/guides/concepts/#core-documentation","title":"Core Documentation","text":""},{"location":"content/guides/concepts/#core-features","title":"Core Features","text":"<p>The fundamental capabilities of CASYS RPG: - AI-powered storytelling - Multi-agent architecture - Real-time game mechanics</p>"},{"location":"content/guides/concepts/#game-mechanics","title":"Game Mechanics","text":"<p>The core game systems and rules: - Rules interpretation - Decision making - State management</p>"},{"location":"content/guides/concepts/#architecture-overview","title":"Architecture Overview","text":"<p>System architecture and design: - Component organization - Data flow - Integration patterns</p>"},{"location":"content/guides/concepts/#advanced-topics","title":"Advanced Topics","text":"<p>Looking to dive deeper? Check out our Advanced Guides: - AI Integration - Custom Agents - State Management</p>"},{"location":"content/guides/concepts/architecture-overview/","title":"Architecture Overview","text":"<p>Overview</p> <p>A high-level view of CASYS RPG's architecture, designed for developers who want to understand the system without diving into technical details.</p>"},{"location":"content/guides/concepts/architecture-overview/#system-overview","title":"System Overview","text":"<pre><code>graph TD\n    subgraph Frontend\n        UI[User Interface] --&gt; WS[WebSocket]\n        UI --&gt; HTTP[HTTP API]\n    end\n\n    subgraph Backend\n        WS --&gt; AM[Agent Manager]\n        HTTP --&gt; AM\n\n        subgraph Agents\n            SA[Story Agent]\n            RA[Rules Agent]\n            DA[Decision Agent]\n            NA[Narrator Agent]\n            TA[Trace Agent]\n        end\n\n        AM --&gt; Agents\n    end\n\n    subgraph Storage\n        DB[Database]\n        FS[File System]\n    end\n\n    Backend --&gt; Storage</code></pre>"},{"location":"content/guides/concepts/architecture-overview/#key-components","title":"Key Components","text":""},{"location":"content/guides/concepts/architecture-overview/#frontend-layer","title":"Frontend Layer","text":"<ul> <li> <p>User Interface</p> <ul> <li>SvelteKit framework</li> <li>Responsive design</li> <li>Real-time updates</li> </ul> </li> <li> <p>Communication</p> <ul> <li>WebSocket for live updates</li> <li>REST API for CRUD operations</li> <li>State synchronization</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/architecture-overview/#backend-layer","title":"Backend Layer","text":"<ul> <li> <p>API Layer</p> <ul> <li>FastAPI framework</li> <li>WebSocket support</li> <li>Request handling</li> </ul> </li> <li> <p>Agent System</p> <ul> <li>Multi-agent architecture</li> <li>Specialized agents</li> <li>Coordinated processing</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/architecture-overview/#storage-layer","title":"Storage Layer","text":"<ul> <li>Data Storage<ul> <li>State persistence</li> <li>Game assets</li> <li>Player data</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/architecture-overview/#system-flow","title":"System Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant F as Frontend\n    participant A as API\n    participant M as Agent Manager\n    participant S as Storage\n\n    U-&gt;&gt;F: Action\n    F-&gt;&gt;A: Request\n    A-&gt;&gt;M: Process\n    M-&gt;&gt;S: Save\n    S--&gt;&gt;M: Confirm\n    M--&gt;&gt;A: Response\n    A--&gt;&gt;F: Update\n    F--&gt;&gt;U: Display</code></pre>"},{"location":"content/guides/concepts/architecture-overview/#design-principles","title":"Design Principles","text":""},{"location":"content/guides/concepts/architecture-overview/#clean-architecture","title":"Clean Architecture","text":"<ul> <li> <p>Separation of Concerns</p> <ul> <li>Clear boundaries</li> <li>Independent layers</li> <li>Clean interfaces</li> </ul> </li> <li> <p>Dependency Management</p> <ul> <li>Inversion of control</li> <li>Dependency injection</li> <li>Clear dependencies</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/architecture-overview/#event-driven-design","title":"Event-Driven Design","text":"<ul> <li> <p>Event System</p> <ul> <li>Message passing</li> <li>State updates</li> <li>Action processing</li> </ul> </li> <li> <p>Async Processing</p> <ul> <li>Non-blocking operations</li> <li>Parallel execution</li> <li>Resource efficiency</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/architecture-overview/#integration-points","title":"Integration Points","text":""},{"location":"content/guides/concepts/architecture-overview/#external-systems","title":"External Systems","text":"<ul> <li> <p>API Integration</p> <ul> <li>Clear interfaces</li> <li>Version control</li> <li>Documentation</li> </ul> </li> <li> <p>Plugin System</p> <ul> <li>Extension points</li> <li>Custom agents</li> <li>System hooks</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/architecture-overview/#data-flow","title":"Data Flow","text":"<pre><code>graph LR\n    subgraph Input\n        UI[User Input]\n        EX[External Data]\n    end\n\n    subgraph Processing\n        AG[Agents]\n        RU[Rules]\n        ST[State]\n    end\n\n    subgraph Output\n        RE[Response]\n        UP[Updates]\n    end\n\n    Input --&gt; Processing\n    Processing --&gt; Output</code></pre>"},{"location":"content/guides/concepts/architecture-overview/#best-practices","title":"Best Practices","text":""},{"location":"content/guides/concepts/architecture-overview/#development","title":"Development","text":"<ol> <li> <p>Code Organization</p> <ul> <li>Clear structure</li> <li>Consistent patterns</li> <li>Documentation</li> </ul> </li> <li> <p>Testing</p> <ul> <li>Unit tests</li> <li>Integration tests</li> <li>Performance tests</li> </ul> </li> </ol>"},{"location":"content/guides/concepts/architecture-overview/#deployment","title":"Deployment","text":"<ol> <li> <p>Environment Setup</p> <ul> <li>Configuration</li> <li>Dependencies</li> <li>Security</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>Logging</li> <li>Metrics</li> <li>Alerts</li> </ul> </li> </ol>"},{"location":"content/guides/concepts/architecture-overview/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Technical Architecture</li> <li>Learn about Advanced Features</li> <li>Try Tutorials</li> </ul>"},{"location":"content/guides/concepts/core-features/","title":"Core Features","text":"<p>CASYS RPG Overview</p> <p>An advanced role-playing game system powered by AI agents, offering dynamic storytelling and sophisticated game mechanics.</p> <pre><code>graph TD\n    subgraph \"Game Flow\"\n        A[Player Input] --&gt; B[Story Evolution]\n        B --&gt; C[Game State Update]\n        C --&gt; D[Narrative Response]\n        D --&gt; A\n    end\n\n    subgraph \"AI Processing\"\n        E[Story Graph]\n        F[Rules Engine]\n        G[Decision Making]\n\n        E --&gt; F\n        F --&gt; G\n        G --&gt; E\n\n        B --&gt; E\n        B --&gt; F\n        B --&gt; G\n    end</code></pre>"},{"location":"content/guides/concepts/core-features/#dynamic-storytelling","title":"Dynamic Storytelling","text":"<p>Adaptive Narrative System</p> Story EvolutionAI Agents <ul> <li>Dynamic Plot Adaptation through StoryGraph</li> <li>Contextual Responses based on player choices</li> <li>Persistent World State tracking</li> </ul> <pre><code>graph LR\n    A[Player Choice] --&gt; B[Context Analysis]\n    B --&gt; C[Story Adaptation]\n    C --&gt; D[World Update]\n    D --&gt; E[Narrative Response]</code></pre> <p>Each agent specializes in a specific aspect of the game:</p> <ul> <li>StoryGraph: Narrative flow orchestration</li> <li>NarratorAgent: Content generation and presentation</li> <li>TraceAgent: History and continuity management</li> </ul>"},{"location":"content/guides/concepts/core-features/#intelligent-game-mechanics","title":"Intelligent Game Mechanics","text":"<p>Advanced Rule Processing</p> Rules EngineDecision System <ul> <li>Real-time Rule Interpretation using GPT-4o-mini</li> <li>Contextual Dice System for dynamic difficulty</li> <li>Adaptive Challenge Scaling</li> </ul> <pre><code># Example Rule Processing\nasync def process_rule(context: GameContext) -&gt; RuleResult:\n    # Dynamic rule interpretation based on context\n    interpretation = await rules_agent.interpret(context)\n    # Contextual difficulty adjustment\n    difficulty = calculate_difficulty(context, interpretation)\n    return apply_rules(interpretation, difficulty)\n</code></pre> <ul> <li>Complex Choice Resolution</li> <li>Consequence Tracking</li> <li>Strategic Depth Analysis</li> </ul>"},{"location":"content/guides/concepts/core-features/#technical-excellence","title":"Technical Excellence","text":"<p>Core Technologies</p> Backend FeaturesArchitecture Highlights <ul> <li>Async Processing: High-performance game logic</li> <li>State Management: Immutable game state with Pydantic</li> <li>WebSocket Communication: Real-time updates</li> </ul> <pre><code>graph TD\n    subgraph \"State Management\"\n        A[Game State] --&gt; B[Validation]\n        B --&gt; C[Processing]\n        C --&gt; D[Cache]\n        D --&gt; E[New State]\n    end</code></pre> <ul> <li>Multi-Agent System: Specialized AI processing</li> <li>Event-Driven Design: Reactive game mechanics</li> <li>Modular Components: Extensible system</li> </ul>"},{"location":"content/guides/concepts/core-features/#performance-features","title":"Performance Features","text":"<p>Optimization Systems</p> CachingProcessing <ul> <li>Memory Cache: Fast access to game rules</li> <li>State Cache: Quick game state retrieval</li> <li>Context Preservation: Efficient history tracking</li> </ul> <ul> <li>Async Operations: Non-blocking game flow</li> <li>Batch Processing: Efficient updates</li> <li>Smart Resource Management</li> </ul>"},{"location":"content/guides/concepts/core-features/#development-benefits","title":"Development Benefits","text":"<p>Key Advantages</p> For PlayersFor Developers <ul> <li>Dynamic Stories: Each playthrough is unique</li> <li>Intelligent Responses: Contextual game reactions</li> <li>Deep Gameplay: Complex but intuitive mechanics</li> </ul> <ul> <li>Modular Design: Easy to extend</li> <li>Clear Architecture: Well-organized components</li> <li>Robust Testing: Comprehensive test coverage</li> </ul>"},{"location":"content/guides/concepts/game-mechanics/","title":"Game Mechanics","text":"<p>Overview</p> <p>Understanding the core game mechanics that power CASYS RPG's interactive storytelling system.</p>"},{"location":"content/guides/concepts/game-mechanics/#core-systems","title":"Core Systems","text":""},{"location":"content/guides/concepts/game-mechanics/#state-management","title":"State Management","text":"<pre><code>graph TD\n    subgraph Game State\n        GS[Game State] --&gt; PS[Player State]\n        GS --&gt; WS[World State]\n        GS --&gt; NS[Narrative State]\n    end\n\n    subgraph Components\n        PS --&gt; AT[Attributes]\n        PS --&gt; IN[Inventory]\n        WS --&gt; LO[Location]\n        WS --&gt; TI[Time]\n        NS --&gt; ST[Story]\n        NS --&gt; QU[Quests]\n    end</code></pre> <ul> <li> <p>State Types</p> <ul> <li>Game state</li> <li>Player state</li> <li>World state</li> <li>Narrative state</li> </ul> </li> <li> <p>State Operations</p> <ul> <li>State updates</li> <li>State validation</li> <li>State persistence</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/game-mechanics/#decision-system","title":"Decision System","text":"<pre><code>graph LR\n    subgraph Input\n        PC[Player Choice]\n        CS[Current State]\n    end\n\n    subgraph Processing\n        RU[Rules]\n        CO[Context]\n    end\n\n    subgraph Output\n        NS[New State]\n        CF[Consequences]\n    end\n\n    Input --&gt; Processing\n    Processing --&gt; Output</code></pre> <ul> <li> <p>Choice Generation</p> <ul> <li>Context analysis</li> <li>Option generation</li> <li>Validation</li> </ul> </li> <li> <p>Consequence Handling</p> <ul> <li>State updates</li> <li>Narrative impacts</li> <li>Long-term effects</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/game-mechanics/#character-system","title":"Character System","text":""},{"location":"content/guides/concepts/game-mechanics/#attributes","title":"Attributes","text":"<ul> <li> <p>Core Stats</p> <ul> <li>Strength</li> <li>Intelligence</li> <li>Dexterity</li> <li>Constitution</li> </ul> </li> <li> <p>Derived Stats</p> <ul> <li>Health</li> <li>Energy</li> <li>Skills</li> <li>Abilities</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/game-mechanics/#progression","title":"Progression","text":"<pre><code>graph TD\n    subgraph Experience\n        XP[XP Gain] --&gt; LV[Level Up]\n        LV --&gt; UP[Upgrades]\n    end\n\n    subgraph Improvements\n        UP --&gt; AS[Attribute Points]\n        UP --&gt; SP[Skill Points]\n        UP --&gt; AB[Abilities]\n    end</code></pre> <ul> <li> <p>Experience System</p> <ul> <li>XP gain</li> <li>Level progression</li> <li>Skill advancement</li> </ul> </li> <li> <p>Character Development</p> <ul> <li>Attribute improvement</li> <li>Skill learning</li> <li>Ability unlocking</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/game-mechanics/#combat-system","title":"Combat System","text":""},{"location":"content/guides/concepts/game-mechanics/#turn-based-combat","title":"Turn-Based Combat","text":"<ul> <li> <p>Action Types</p> <ul> <li>Attack</li> <li>Defend</li> <li>Use item</li> <li>Special ability</li> </ul> </li> <li> <p>Combat Flow</p> <ul> <li>Initiative</li> <li>Action selection</li> <li>Resolution</li> <li>Effects</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/game-mechanics/#dice-system","title":"Dice System","text":"<pre><code>graph LR\n    subgraph Roll\n        DI[Dice] --&gt; MO[Modifiers]\n        MO --&gt; RE[Result]\n    end\n\n    subgraph Factors\n        AT[Attributes]\n        SK[Skills]\n        CO[Context]\n    end\n\n    Factors --&gt; MO</code></pre> <ul> <li> <p>Roll Types</p> <ul> <li>Skill checks</li> <li>Combat rolls</li> <li>Saving throws</li> </ul> </li> <li> <p>Modifiers</p> <ul> <li>Attribute bonuses</li> <li>Skill bonuses</li> <li>Situational modifiers</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/game-mechanics/#inventory-system","title":"Inventory System","text":""},{"location":"content/guides/concepts/game-mechanics/#item-management","title":"Item Management","text":"<ul> <li> <p>Item Types</p> <ul> <li>Equipment</li> <li>Consumables</li> <li>Quest items</li> <li>Resources</li> </ul> </li> <li> <p>Operations</p> <ul> <li>Acquire</li> <li>Use</li> <li>Combine</li> <li>Trade</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/game-mechanics/#equipment","title":"Equipment","text":"<pre><code>graph TD\n    subgraph Slots\n        WE[Weapon]\n        AR[Armor]\n        AC[Accessory]\n    end\n\n    subgraph Effects\n        ST[Stats]\n        AB[Abilities]\n        BU[Buffs]\n    end\n\n    Slots --&gt; Effects</code></pre> <ul> <li> <p>Equipment Slots</p> <ul> <li>Weapon</li> <li>Armor</li> <li>Accessories</li> </ul> </li> <li> <p>Equipment Effects</p> <ul> <li>Stat modifications</li> <li>Special abilities</li> <li>Status effects</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/game-mechanics/#quest-system","title":"Quest System","text":""},{"location":"content/guides/concepts/game-mechanics/#quest-management","title":"Quest Management","text":"<ul> <li> <p>Quest Types</p> <ul> <li>Main quests</li> <li>Side quests</li> <li>Dynamic events</li> </ul> </li> <li> <p>Quest Components</p> <ul> <li>Objectives</li> <li>Requirements</li> <li>Rewards</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/game-mechanics/#progress-tracking","title":"Progress Tracking","text":"<pre><code>graph TD\n    subgraph Quest\n        ST[Start] --&gt; PR[Progress]\n        PR --&gt; CO[Complete]\n    end\n\n    subgraph Tracking\n        OB[Objectives]\n        MI[Milestones]\n        RE[Rewards]\n    end\n\n    Quest --&gt; Tracking</code></pre> <ul> <li> <p>Progress Types</p> <ul> <li>Task completion</li> <li>Collection</li> <li>Achievement</li> </ul> </li> <li> <p>Reward Types</p> <ul> <li>Experience</li> <li>Items</li> <li>Resources</li> <li>Story progression</li> </ul> </li> </ul>"},{"location":"content/guides/concepts/game-mechanics/#next-steps","title":"Next Steps","text":"<ul> <li>Try the Tutorial</li> <li>Explore Advanced Features</li> <li>Read about Technical Implementation</li> </ul>"},{"location":"content/guides/getting-started/","title":"Getting Started","text":"<p>Quick Start Guide</p> <p>This guide will help you get started with CASYS RPG, from installation to creating your first game.</p>"},{"location":"content/guides/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Requirements</p> <ul> <li>Python 3.10 or higher</li> <li>Node.js 18 or higher</li> <li>Git</li> </ul>"},{"location":"content/guides/getting-started/#installation","title":"Installation","text":"Using pipFrom source <pre><code>pip install casys-rpg\n</code></pre> <pre><code>git clone https://github.com/yourusername/casys-rpg.git\ncd casys-rpg\npip install -e .\n</code></pre>"},{"location":"content/guides/getting-started/#basic-configuration","title":"Basic Configuration","text":"<p>Configuration File</p> <pre><code># config.yml\ngame:\n  name: \"My First Adventure\"\n  version: \"1.0.0\"\n\nagents:\n  story_graph:\n    model: \"gpt-4o-mini\"\n  rules:\n    enabled: true\n  narrator:\n    style: \"descriptive\"\n</code></pre>"},{"location":"content/guides/getting-started/#first-steps","title":"First Steps","text":"<ol> <li> <p>Create a New Game <pre><code>casys-rpg init my-game\ncd my-game\n</code></pre></p> </li> <li> <p>Configure Your Game    Edit <code>config.yml</code> with your game settings</p> </li> <li> <p>Start Development Server <pre><code>casys-rpg dev\n</code></pre></p> </li> </ol>"},{"location":"content/guides/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the Core Concepts</li> <li>Explore Advanced Features</li> <li>Check our Technical Documentation</li> </ul>"},{"location":"content/guides/getting-started/#common-issues","title":"Common Issues","text":"<p>Troubleshooting</p> <ul> <li>Check Python version compatibility</li> <li>Verify Node.js installation</li> <li>Ensure all dependencies are installed</li> </ul> <p>Development Tips</p> <ul> <li>Use VSCode with our extension</li> <li>Enable debug logging</li> <li>Join our Discord community</li> </ul>"},{"location":"content/guides/getting-started/#examples","title":"Examples","text":"Basic GameUsing WebSocket <pre><code>from casys_rpg.agents import StoryGraphAgent, RulesAgent, NarratorAgent\nfrom casys_rpg.managers import AgentManager, StateManager\n\n# Initialize managers\nstate_mgr = StateManager()\nagent_mgr = AgentManager(state_mgr)\n\n# Initialize agents\nstory = StoryGraphAgent()\nrules = RulesAgent()\nnarrator = NarratorAgent()\n\n# Register agents\nagent_mgr.register_agent(story)\nagent_mgr.register_agent(rules)\nagent_mgr.register_agent(narrator)\n\n# Start game processing\nagent_mgr.start()\n</code></pre> <pre><code>from fastapi import FastAPI, WebSocket\nfrom casys_rpg.api.routes.ws import GameWSConnectionManager\n\napp = FastAPI()\nws_manager = GameWSConnectionManager()\n\n@app.websocket(\"/ws/game\")\nasync def game_websocket(websocket: WebSocket):\n    await ws_manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_json()\n            # Process game actions\n            response = await process_game_action(data)\n            await websocket.send_json(response)\n    except Exception as e:\n        ws_manager.disconnect(websocket)\n</code></pre>"},{"location":"content/guides/getting-started/#support","title":"Support","text":"<p>Need Help?</p> <ul> <li>Check our FAQ</li> <li>Join our Discord</li> <li>Open an Issue</li> </ul>"}]}