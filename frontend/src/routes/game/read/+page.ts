import { gameService } from '$lib/services/gameService';
import { gameSession } from '$lib/stores/gameStore';
import type { PageLoad } from './$types';
import { browser } from '$app/environment';
import { get } from 'svelte/store';

export const load: PageLoad = async ({ fetch }) => {
    console.log('üéÆ Loading game page...');
    
    // Utiliser le fetch de SvelteKit
    gameService.setFetch(fetch);

    // Si on est c√¥t√© serveur, retourner un √©tat initial vide
    if (!browser) {
        return {
            error: null,
            gameState: null
        };
    }

    // V√©rifier si on a d√©j√† une session
    const currentSession = get(gameSession);
    const hasSession = !!currentSession.gameId;
    
    try {
        if (!hasSession) {
            // Initialiser le WebSocket et r√©cup√©rer l'√©tat initial
            const gameResponse = await gameService.initialize();
            console.log('üé≤ Game response:', gameResponse);

            if (!gameResponse.success) {
                return {
                    error: gameResponse.message,
                    gameState: null
                };
            }
        } else {
            // Se connecter au WebSocket avec la session existante
            await gameService.connectWebSocket();
        }

        // R√©cup√©rer l'√©tat du jeu
        const stateResponse = await gameService.getGameState();
        console.log('üì• Initial state:', stateResponse);

        return {
            error: stateResponse.success ? null : stateResponse.message,
            gameState: stateResponse.state
        };
    } catch (error) {
        console.error('‚ùå Error loading game:', error);
        return {
            error: error instanceof Error ? error.message : 'Une erreur est survenue',
            gameState: null
        };
    }
};
