üé≤ CASYS RPG - ARCHITECTURE ET TECHNOLOGIES

ARCHITECTURE GLOBALE

Syst√®me d'Agents
Architecture multi-agents bas√©e sur LangChain / langgraph

Cinq agents sp√©cialis√©s :

StoryGraph : Gestion du workflow et des transitions d'√©tat
RulesAgent : Analyse et interpr√©tation des r√®gles du jeu
DecisionAgent : Gestion de la logique d√©cisionnelle
NarratorAgent : Pr√©sentation et formatage du contenu
TraceAgent : Gestion de l'historique des actions et des statistiques du personnage
Communication :

Configuration hi√©rarchique √† plusieurs niveaux :
GameConfig : Configuration principale du jeu
AgentConfigs : Configurations sp√©cifiques pour chaque agent
ManagerConfigs : Configurations pour les managers
StorageConfig : Configuration du stockage

Gestionnaires (Managers)

Managers Principaux :
AgentManager : Coordinateur de haut niveau
Gestion des interactions utilisateur
Coordination de l'√©tat du jeu
Gestion des erreurs
Gestion des sessions

Managers d'√âtat et Cache :
StateManager : Gestion de l'√©tat du jeu
CacheManager : Gestion du cache en m√©moire
Managers de Contenu :
RulesManager : Gestion des r√®gles du jeu
NarratorManager : Gestion du contenu narratif
DecisionManager : Gestion des d√©cisions
CharacterManager : Gestion des personnages
TraceManager : Gestion de l'historique
Infrastructure :
FilesystemAdapter : Gestion des acc√®s fichiers

Orchestration via LangGraph (StateGraph)
Coordination centralis√©e par StoryGraph
Communication asynchrone (AsyncGenerator)
Le StoryGraph est en fait l'agent principal qui orchestre le workflow du jeu Il g√®re :

Les transitions d'√©tat
L'ex√©cution du workflow principal
La coordination entre les autres agents
La gestion des erreurs

Gestion d'√âtat
Syst√®me d'√©tat immutable avec validation Pydantic v2
Tra√ßabilit√© compl√®te des actions et d√©cisions
Gestion des √©v√©nements asynchrones
Cache en m√©moire pour les performances
Moteur de R√®gles
Syst√®me de cache en m√©moire pour les r√®gles
Analyse LLM (gpt-4o-mini) pour l'interpr√©tation
Syst√®me de d√©s contextuel (chance et combat)
Validation des conditions en temps r√©el
Stockage des r√®gles en format Markdown


TECHNOLOGIES UTILIS√âES

Backend (Python 3.8+)
FastAPI : API REST et WebSocket
Pydantic v2 : Validation de donn√©es et s√©rialisation
LangGraph : Orchestration des agents
OpenAI API (gpt-4o-mini) : Mod√®le de langage
AsyncIO : Gestion asynchrone

Frontend
Qwik : Framework web moderne et performant
Tailwind CSS : Styling utilitaire
Websockets

Composants personnalis√©s :
Syst√®me de d√©s anim√© (TBD)
Affichage du livre
Interface de combat (TBD)
TypeScript pour la type-safety
Vite comme bundler
Stockage et Cache
Syst√®me de cache en m√©moire

Stockage fichier pour :
R√®gles (Markdown)
Historique des parties
Feedback utilisateurs
S√©rialisation JSON

Tests et Qualit√©
PyTest : Tests unitaires et d'int√©gration
Black : Formatage de code
MkDocs : Documentation
Logging avanc√© avec loguru
PATTERNS ET PRINCIPES

Design Patterns
Factory Pattern : Cr√©ation d'agents et managers
Protocol Pattern : Interfaces et abstraction
Architecture
Clean Architecture avec s√©paration des responsabilit√©s
Domain-Driven Design pour la logique m√©tier
Event-Driven pour la communication
Injection de d√©pendances
Principes SOLID
Single Responsibility : Agents et managers sp√©cialis√©s
Open/Closed : Extensions via protocols
Liskov Substitution : Interfaces coh√©rentes
Interface Segregation : Protocols sp√©cifiques
Dependency Inversion : Injection des d√©pendances
STRUCTURE DU PROJET

casys-rpg/ 
‚îú‚îÄ‚îÄ agents/ # Agents LLM sp√©cialis√©s 
‚îú‚îÄ‚îÄ models/ # Mod√®les de donn√©es 
‚îú‚îÄ‚îÄ managers/ # Gestionnaires de composants 
‚îú‚îÄ‚îÄ config/ # Configuration 
‚îú‚îÄ‚îÄ data/ # Donn√©es du jeu
‚îú‚îÄ‚îÄ docs/ # Documentation
‚îú‚îÄ‚îÄ api/ # API REST et WebSocket

 ‚îú‚îÄ‚îÄ frontend/ 
‚îú‚îÄ‚îÄ tests/ # Tests 
‚îî‚îÄ‚îÄ utils/ # Utilitaires

WORKFLOWS PRINCIPAUX

Flow de Jeu
Entr√©e utilisateur ‚Üí DecisionAgent
DecisionAgent ‚Üí RulesAgent
RulesAgent ‚Üí NarratorAgent
NarratorAgent ‚Üí Interface
TraceAgent ‚Üê Tous les agents
Traitement des R√®gles
Requ√™te ‚Üí Cache
Si absent ‚Üí Analyse LLM
Validation ‚Üí D√©cision
Mise en cache
Mises √† jour d'√âtat
Action ‚Üí Validation
Validation ‚Üí Mise √† jour
Mise √† jour ‚Üí √âv√©nements
√âv√©nements ‚Üí Interface

D√âPENDANCES PRINCIPALES

langgraph
fastapi
pydantic

openai
pytest
black
@builder.io/qwik
tailwindcss
typescript
vite